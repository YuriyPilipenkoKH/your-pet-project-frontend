{"version":3,"file":"static/js/631.ccff4261.chunk.js","mappings":"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","sources":["hooks/useLocalStaoreage.js","components/Forms/AddPetForm/ChooseOption/ChooseOption.jsx","components/Forms/AddPetForm/ListSteps/ListProgresSteps.jsx","components/Forms/AddPetForm/AddYourPet/PersonalDetails/PersonalDetails.jsx","components/Forms/AddPetForm/AddYourPet/MoreInfo/MoreInfo.jsx","components/Forms/AddPetForm/AddYourPet/AddYourPet.jsx","components/Forms/AddPetForm/AddSellPet/PersonalDetails/PersonalDetails.jsx","components/Forms/AddPetForm/AddSellPet/MoreInfo/MoreInfo.jsx","components/Forms/AddPetForm/AddSellPet/AddSellPet.jsx","components/Forms/AddPetForm/AddLostPet/PersonalDetails/PersonalDetails.jsx","components/Forms/AddPetForm/AddLostPet/MoreInfo/MoreInfo.jsx","components/Forms/AddPetForm/AddLostPet/AddLostPet.jsx","components/Forms/AddPetForm/AddInGoodHandsPet/PersonalDetails/PersonalDetails.jsx","components/Forms/AddPetForm/AddInGoodHandsPet/MoreInfo/MoreInfo.jsx","components/Forms/AddPetForm/AddInGoodHandsPet/AddInGoodHandsPet.jsx","components/Forms/AddPetForm/AddPetForm.jsx","pages/AddPetPage.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport const useLocalStorage = (key, initialState) => {\r\n    const [state, setState] = useState(() => JSON.parse(localStorage.getItem(key)) ?? initialState);\r\n    useEffect(() => {\r\n        localStorage.setItem(key, JSON.stringify(state));\r\n    }, [key, state])\r\n    return [state, setState];\r\n}","import {  useEffect, useState } from 'react';\r\nimport {\r\n    ButtonOption,\r\n    Form,\r\n    ItemOption,\r\n    ListOption,\r\n    Title,\r\n    WrapperNextBackButton,\r\n} from '../../Forms.styled';\r\nimport { Button, ButtonTransparent } from '../../../Button/Button';\r\nimport { BiArrowBack } from 'react-icons/bi';\r\nimport { iconPawprint } from '../../../../images/icons';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\nexport default function ChooseOption({\r\n    children,\r\n    active,\r\n    activeOption,\r\n    arrayOption,\r\n    nextForm,\r\n    beforeForm,\r\n    stepNumber,\r\n}) {\r\n\r\n    const { language} = useAll()\r\n    const [lang, setLang] = useState(langUA)\r\n    useEffect(() => {\r\n      setLang(language === 'english' ?  langEN :  langUA);\r\n    }, [language])\r\n\r\n    return (\r\n        <Form addPet>\r\n            <Title addPet> {lang.addPet} </Title>\r\n            {children}\r\n            <ListOption>\r\n                {arrayOption.map((option, index) => {\r\n                    return (\r\n                        <ItemOption key={index}>\r\n                            <ButtonOption\r\n                                onClick={() => {\r\n                                    activeOption(index);\r\n                                }}\r\n                                active={active}\r\n                                currentActive={index + 1}\r\n                                type=\"button\"\r\n                            >\r\n                                {option}\r\n                            </ButtonOption>\r\n                        </ItemOption>\r\n                    );\r\n                })}\r\n            </ListOption>\r\n            <WrapperNextBackButton>\r\n                <ButtonTransparent addPet onClick={() => beforeForm()}>\r\n                    <BiArrowBack /> {stepNumber > 1 ? lang.back : lang.cancel}\r\n                </ButtonTransparent>\r\n                <Button\r\n                    stepNumber={stepNumber}\r\n                    addPet\r\n                    onClick={() => nextForm()}\r\n                >\r\n                    {stepNumber > 2 ? lang.done : lang.next} {iconPawprint}\r\n                </Button>\r\n            </WrapperNextBackButton>\r\n        </Form>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { ItemStep, ListSteps, Progres, TextStep } from '../../Forms.styled';\r\n\r\nexport default function ListProgresSteps({stepNumber, arraySteps}) {\r\n    return (\r\n        <ListSteps chooseOption>\r\n            {arraySteps.map((step, index) => {\r\n                return (\r\n                    <ItemStep key={index}>\r\n                        <TextStep\r\n                            currentStep={index + 1}\r\n                            stepNumber={stepNumber}\r\n                        >\r\n                            {step}\r\n                        </TextStep>\r\n                        <Progres\r\n                            currentStep={index + 1}\r\n                            stepNumber={stepNumber}\r\n                        />\r\n                    </ItemStep>\r\n                );\r\n            })}\r\n        </ListSteps>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    InputForAddPet,\r\n    LabelForAdd,\r\n    TextValidation,\r\n    Title,\r\n    TypeInput,\r\n    WrapperNextBackButton,\r\n} from '../../../Forms.styled';\r\nimport { Button, ButtonTransparent } from '../../../../Button/Button';\r\nimport { BiArrowBack } from 'react-icons/bi';\r\nimport { IconCross, iconPawprint } from '../../../../../images/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\nconst schema = object({\r\n    name: string()\r\n        .required()\r\n        .min(2, 'Name should be at least 2 characters')\r\n        .max(16, 'Name should not exceed 16 characters')\r\n        .matches(\r\n            /^[a-zA-Z]{2,16}$/,\r\n            'Name should contain only letters and without spaces'\r\n        ),\r\n    birth: string()\r\n        .required()\r\n        .matches(\r\n            /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(0[0-9]{1,3}|20[0-2][0-3])$/,\r\n            'Enter a valid date in DD-MM-YYYY format'\r\n        ),\r\n    typePet: string()\r\n        .required()\r\n        .min(2)\r\n        .max(16)\r\n        .matches(/^[a-zA-Z]{2,16}$/, 'Type should contain only letters'),\r\n}).required();\r\n\r\nexport default function PersonalDetails({\r\n    children,\r\n    nextForm,\r\n    beforeForm,\r\n    stepNumber,\r\n    deliveryDataPet,\r\n}) {\r\n    const [isNameValid, setIsNameValid] = useState(false);\r\n    const [isBirthValid, setIsBirthValid] = useState(false);\r\n    const [isTypeValid, setIsTypeValid] = useState(false);\r\n    const [name, setName] = useLocalStorage('nameYourPet', '');\r\n    const [birth, setBirth] = useLocalStorage('birthYourPet', '');\r\n    const [typePet, setTypePet] = useLocalStorage('typePetYourPet', '');\r\n\r\n    const { language} = useAll()\r\n    const [lang, setLang] = useState(langUA)\r\n\r\n    useEffect(() => {\r\n      setLang(language === 'english' ?  langEN :  langUA);\r\n    }, [language])\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            name: name || '',\r\n            birth: birth ||'',\r\n            typePet: typePet || '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const reset = () => {\r\n        setName('');\r\n        setBirth('');\r\n        setTypePet('');\r\n        setIsNameValid(false);\r\n        setIsBirthValid(false);\r\n        setIsTypeValid(false);\r\n    };\r\n    const deliveryData = data => {\r\n        const { name, birth, typePet } = data;\r\n        deliveryDataPet({ name, birthday: birth, type: typePet });\r\n        nextForm();\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form addPet>\r\n            <Title addPet>{lang.addYourPet}</Title>\r\n            {children}\r\n            <form\r\n                onSubmit={handleSubmit(deliveryData)}\r\n                style={{ marginTop: '16px' }}\r\n            >\r\n                <LabelForAdd>\r\n                    <TypeInput>{lang.petsname} </TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('name')}\r\n                        aria-invalid={errors.name ? 'true' : 'false'}\r\n                        placeholder={lang.typename}\r\n                        type=\"text\"\r\n                        value={name}\r\n                        style={{\r\n                            border: errors.name\r\n                                ? '1px solid var(--red)'\r\n                                : isNameValid && !errors.name\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z]{2,16}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsNameValid(isValid);\r\n                            setName(e.target.value);\r\n                            if (isValid) {\r\n                                errors.name = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isNameValid && !errors.name && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.name && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.name.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsNameValid(false);\r\n                                    setName('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd>\r\n                    <TypeInput>{lang.birthday}</TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('birth')}\r\n                        aria-invalid={errors.birth ? 'true' : 'false'}\r\n                        placeholder={lang.typebirth}\r\n                        type=\"text\"\r\n                        value={birth}\r\n                        style={{\r\n                            border: errors.birth\r\n                                ? '1px solid var(--red)'\r\n                                : isBirthValid && !errors.birth\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid =\r\n                                /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(0[0-9]{1,3}|20[0-2][0-3])$/.test(\r\n                                    e.target.value\r\n                                );\r\n                            setIsBirthValid(isValid);\r\n                            setBirth(e.target.value);\r\n                            if (isValid) {\r\n                                errors.birth = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isBirthValid && !errors.birth && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.birth && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.birth.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsBirthValid(false);\r\n                                    setBirth('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd yourPet>\r\n                    <TypeInput> {lang.type} </TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('typePet')}\r\n                        aria-invalid={errors.typePet ? 'true' : 'false'}\r\n                        placeholder={lang.typepet}\r\n                        type=\"text\"\r\n                        value={typePet}\r\n                        style={{\r\n                            border: errors.typePet\r\n                                ? '1px solid var(--red)'\r\n                                : isTypeValid && !errors.typePet\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z]{2,16}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsTypeValid(isValid);\r\n                            setTypePet(e.target.value);\r\n                            if (isValid) {\r\n                                errors.typePet = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isTypeValid && !errors.typePet && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.typePet && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.typePet.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsTypeValid(false);\r\n                                    setTypePet('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <WrapperNextBackButton>\r\n                    <ButtonTransparent addPet onClick={() => beforeForm()}>\r\n                        <BiArrowBack /> {stepNumber > 1 ? lang.back : lang.cancel}\r\n                    </ButtonTransparent>\r\n                    <Button stepNumber={stepNumber} addPet type=\"submit\">\r\n                        {stepNumber > 2 ? lang.done : lang.next} {iconPawprint}\r\n                    </Button>\r\n                </WrapperNextBackButton>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import React, { useState , useEffect} from 'react';\r\nimport {\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    ImagePet,\r\n    ImageWrapper,\r\n    InputUploadImage,\r\n    LabelForAdd,\r\n    LabelForAddImage,\r\n    PlusImage,\r\n    TextValidation,\r\n    Textarea,\r\n    Title,\r\n    TypeInput,\r\n    WrapperNextBackButton,\r\n} from '../../../Forms.styled';\r\nimport { Button, ButtonTransparent } from '../../../../Button/Button';\r\nimport { BiArrowBack } from 'react-icons/bi';\r\nimport { IconCross, iconPawprint } from '../../../../../images/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\nconst schema = object({\r\n    coment: string()\r\n        .required('Comment is required')\r\n        .matches(\r\n            /^[a-zA-Z0-9\\s\\W]{0,120}$/,\r\n            'Comment max 120 characters, letters, numbers, symbols allowed'\r\n        )\r\n        .max(120, 'Comment must be at most 120 characters'),\r\n}).required();\r\n\r\nexport default function MoreInfo({\r\n    children,\r\n    beforeForm,\r\n    stepNumber,\r\n    deliveryDataPet,\r\n}) {\r\n    const [isComentValid, setIsComentValid] = useState(false);\r\n    const [coment, setComent] = useLocalStorage('comentYourPet', '');\r\n    const [imageURL, setImageURL] = useLocalStorage('imageUrlYourPet', '');\r\n    const [imageError, setImageError] = useState(null);\r\n\r\n    const { language} = useAll()\r\n    const [lang, setLang] = useState(langUA)\r\n\r\n    useEffect(() => {\r\n      setLang(language === 'english' ?  langEN :  langUA);\r\n    }, [language])\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            coment: coment || '',\r\n            imageURL: imageURL || '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const handleImageChange = e => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (file.size > 3 * 1024 * 1024) {\r\n                setImageError('Image size should be less than 3MB');\r\n            } else {\r\n                setImageError(null);\r\n                setImageURL(URL.createObjectURL(file));\r\n            }\r\n        }\r\n    };\r\n    const reset = () => {\r\n        setComent('');\r\n        setIsComentValid(false);\r\n        setImageURL('');\r\n        setImageError(null);\r\n    };\r\n    const deliveryData = data => {\r\n        const { imageURL, coment } = data;\r\n        const image = imageURL[0];\r\n        deliveryDataPet({\r\n            comments: coment,\r\n            petAvatar: image,\r\n        });\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form addPet>\r\n            <Title addPet>{lang.addPet}</Title>\r\n            {children}\r\n            <form\r\n                onSubmit={handleSubmit(deliveryData)}\r\n                encType=\"multipart/form-data\"\r\n                style={{ marginTop: \"16px\" }}\r\n            >\r\n                <LabelForAddImage>\r\n                    <TypeInput addImage>{lang.loadimg}</TypeInput>\r\n                    <ImageWrapper>\r\n                        <InputUploadImage\r\n                            {...register('imageURL')}\r\n                            aria-invalid={errors.imageURL ? 'true' : 'false'}\r\n                            type=\"file\"\r\n                            accept=\".png, .jpg, .jpeg, .webp\"\r\n                            required\r\n                            onChange={handleImageChange}\r\n                        ></InputUploadImage>\r\n                        {!imageURL && (\r\n                            <>\r\n                                <PlusImage\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    viewBox=\"0 0 182 182\"\r\n                                    fill=\"none\"\r\n                                >\r\n                                    <rect\r\n                                        width=\"182\"\r\n                                        height=\"182\"\r\n                                        rx=\"40\"\r\n                                        fill=\"#CCE4FB\"\r\n                                    />\r\n                                    <path\r\n                                        d=\"M92 115V91M92 91V67M92 91H116.375M92 91H67.625\"\r\n                                        stroke=\"#54ADFF\"\r\n                                    />\r\n                                </PlusImage>\r\n                            </>\r\n                        )}\r\n                        {imageURL && <ImagePet src={imageURL} />}\r\n                    </ImageWrapper>\r\n                    {imageError && (\r\n                        <TextValidation>{imageError}</TextValidation>\r\n                    )}\r\n                </LabelForAddImage>\r\n                <LabelForAdd coment>\r\n                    <TypeInput>{lang.comments}</TypeInput>\r\n                    <Textarea\r\n                        {...register('coment')}\r\n                        aria-invalid={errors.coment ? 'true' : 'false'}\r\n                        {...register('coment', {\r\n                            maxLength: 120,\r\n                        })}\r\n                        placeholder={lang.typecomment}\r\n                        type=\"text\"\r\n                        value={coment}\r\n                        spellCheck=\"false\"\r\n                        data-grame=\"false\"\r\n                        style={{\r\n                            border: errors.coment\r\n                                ? '1px solid var(--red)'\r\n                                : isComentValid && !errors.coment\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z0-9\\s\\W]{0,120}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsComentValid(isValid);\r\n                            setComent(e.target.value);\r\n                            const textarea = e.target;\r\n                            textarea.style.height = 'auto';\r\n                            textarea.style.height =\r\n                                textarea.scrollHeight + 'px';\r\n                            if (isValid) {\r\n                                errors.coment = undefined;\r\n                            }\r\n                        }}\r\n                    ></Textarea>\r\n\r\n                    {isComentValid  && !errors.coment && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.coment && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.coment.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsComentValid(false);\r\n                                    setComent('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <WrapperNextBackButton>\r\n                    <ButtonTransparent addPet onClick={() => beforeForm()}>\r\n                        <BiArrowBack /> {stepNumber > 1 ? lang.back : lang.cancel}\r\n                    </ButtonTransparent>\r\n                    <Button stepNumber={stepNumber} addPet type=\"submit\">\r\n                        {stepNumber > 2 ? lang.done : lang.next} {iconPawprint}\r\n                    </Button>\r\n                </WrapperNextBackButton>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import React, { useRef } from 'react';\r\nimport PersonalDetails from './PersonalDetails/PersonalDetails';\r\nimport MoreInfo from './MoreInfo/MoreInfo';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport operations from 'redux/pets/petsOperations';\r\nimport { useDispatch } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default function AddYourPet({\r\n    children,\r\n    nextForm,\r\n    beforeForm,\r\n    stepNumber,\r\n    state,\r\n    clearStepNumber,\r\n    clearData,\r\n}) {\r\n    const [pet, setPet] = useLocalStorage('dataYourPet', {});\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const backLinkLocation = useRef(state?.from ?? '/');\r\n    const deliveryDataPet = data => {\r\n        setPet(prevState => {\r\n            return { ...prevState, ...data };\r\n        });\r\n        if (stepNumber === 3) {\r\n            const formData = new FormData();\r\n            for (const key in { ...pet, ...data }) {\r\n                formData.append(key, { ...pet, ...data }[key]);\r\n            }\r\n            dispatch(operations.addMySelfPet(formData))\r\n            .then(() => {\r\n                toast.success(`Pet added successfully`);\r\n            })\r\n            .catch(() => {\r\n                toast.error('Something went wrong');\r\n            });\r\n            navigate(backLinkLocation.current);\r\n            clearStepNumber();\r\n            clearData('dataYourPet');\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {stepNumber === 2 && (\r\n                <PersonalDetails\r\n                    children={children}\r\n                    nextForm={nextForm}\r\n                    beforeForm={beforeForm}\r\n                    stepNumber={stepNumber}\r\n                    deliveryDataPet={deliveryDataPet}\r\n                />\r\n            )}\r\n            {stepNumber === 3 && (\r\n                <MoreInfo\r\n                    children={children}\r\n                    nextForm={nextForm}\r\n                    beforeForm={beforeForm}\r\n                    stepNumber={stepNumber}\r\n                    deliveryDataPet={deliveryDataPet}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import {  useEffect, useState } from 'react';\r\nimport {\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    InputForAddPet,\r\n    LabelForAdd,\r\n    TextValidation,\r\n    Title,\r\n    TypeInput,\r\n    WrapperNextBackButton,\r\n} from '../../../Forms.styled';\r\nimport { Button, ButtonTransparent } from '../../../../Button/Button';\r\nimport { BiArrowBack } from 'react-icons/bi';\r\nimport { IconCross, iconPawprint } from '../../../../../images/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\nconst schema = object({\r\n    title: string()\r\n        .required('Title is required')\r\n        .min(2, 'Title should be at least 2 characters')\r\n        .max(50, 'Title should not exceed 50 characters')\r\n        .matches(\r\n            /^[a-zA-Zа-яА-Я0-9\\s]+$/,\r\n            'Title should contain only letters, numbers, and spaces'\r\n        ),\r\n    name: string()\r\n        .required()\r\n        .min(2, 'Name should be at least 2 characters')\r\n        .max(16, 'Name should not exceed 16 characters')\r\n        .matches(\r\n            /^[a-zA-Z]{2,16}$/,\r\n            'Name should contain only letters and without spaces'\r\n        ),\r\n    birth: string()\r\n        .required()\r\n        .matches(\r\n            /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(0[0-9]{1,3}|20[0-2][0-3])$/,\r\n            'Enter a valid date in DD-MM-YYYY format'\r\n        ),\r\n    typePet: string()\r\n        .required()\r\n        .min(2)\r\n        .max(16)\r\n        .matches(/^[a-zA-Z]{2,16}$/, 'Type should contain only letters'),\r\n}).required();\r\n\r\nexport default function PersonalDetails({\r\n    children,\r\n    nextForm,\r\n    beforeForm,\r\n    stepNumber,\r\n    deliveryDataPet,\r\n}) {\r\n    const [isNameValid, setIsNameValid] = useState(false);\r\n    const [isBirthValid, setIsBirthValid] = useState(false);\r\n    const [isTypeValid, setIsTypeValid] = useState(false);\r\n    const [isTitleValid, setIsTitleValid] = useState(false);\r\n    const [title, setTitle] = useLocalStorage('titleSell', '');\r\n    const [name, setName] = useLocalStorage('nameSell', '');\r\n    const [birth, setBirth] = useLocalStorage('birthSell', '');\r\n    const [typePet, setTypePet] = useLocalStorage('typeSell', '');\r\n    const { language} = useAll()\r\n    const [lang, setLang] = useState(langUA)\r\n\r\n    useEffect(() => {\r\n      setLang(language === 'english' ?  langEN :  langUA);\r\n    }, [language])\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            name: name || '',\r\n            birth: birth ||'',\r\n            typePet: typePet || '',\r\n            title: title || '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n    const reset = () => {\r\n        setName('');\r\n        setBirth('');\r\n        setTypePet('');\r\n        setTitle('');\r\n        setIsTitleValid(false);\r\n        setIsNameValid(false);\r\n        setIsBirthValid(false);\r\n        setIsTypeValid(false);\r\n    };\r\n    const deliveryData = data => {\r\n        const { name, birth, typePet, title } = data;\r\n        const birthday = birth;\r\n        deliveryDataPet({ name: name, birthday, type: typePet, title });\r\n        nextForm();\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form addPet>\r\n            <Title addPet>{lang.addpetforsale} </Title>\r\n            {children}\r\n            <form\r\n                onSubmit={handleSubmit(deliveryData)}\r\n                style={{ marginTop: '16px' }}\r\n            >\r\n                <LabelForAdd>\r\n                    <TypeInput>{lang.titleofadd}</TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('title')}\r\n                        aria-invalid={errors.title ? 'true' : 'false'}\r\n                        placeholder={lang.titleofadd}\r\n                        type=\"text\"\r\n                        value={title}\r\n                        style={{\r\n                            border: errors.title\r\n                                ? '1px solid var(--red)'\r\n                                : isTitleValid && !errors.title\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Zа-яА-Я0-9\\s]+$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsTitleValid(isValid);\r\n                            setTitle(e.target.value);\r\n                            if (isValid) {\r\n                                errors.title = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isTitleValid && !errors.title && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.title && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.title.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsTitleValid(false);\r\n                                    setTitle('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd>\r\n                    <TypeInput>{lang.petsname}</TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('name')}\r\n                        aria-invalid={errors.name ? 'true' : 'false'}\r\n                        placeholder={lang.typename}\r\n                        type=\"text\"\r\n                        value={name}\r\n                        style={{\r\n                            border: errors.name\r\n                                ? '1px solid var(--red)'\r\n                                : isNameValid && !errors.name\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z]{2,16}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsNameValid(isValid);\r\n                            setName(e.target.value);\r\n                            if (isValid) {\r\n                                errors.name = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isNameValid && !errors.name && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.name && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.name.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsNameValid(false);\r\n                                    setName('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd>\r\n                    <TypeInput>{lang.Birthday}</TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('birth')}\r\n                        aria-invalid={errors.birth ? 'true' : 'false'}\r\n                        placeholder={lang.typebirth}\r\n                        type=\"text\"\r\n                        value={birth}\r\n                        style={{\r\n                            border: errors.birth\r\n                                ? '1px solid var(--red)'\r\n                                : isBirthValid && !errors.birth\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid =\r\n                                /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(0[0-9]{1,3}|20[0-2][0-3])$/.test(\r\n                                    e.target.value\r\n                                );\r\n                            setIsBirthValid(isValid);\r\n                            setBirth(e.target.value);\r\n                            if (isValid) {\r\n                                errors.birth = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isBirthValid && !errors.birth && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.birth && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.birth.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsBirthValid(false);\r\n                                    setBirth('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd yourPet>\r\n                    <TypeInput>{lang.type}</TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('typePet')}\r\n                        aria-invalid={errors.typePet ? 'true' : 'false'}\r\n                        placeholder={lang.typepet}\r\n                        type=\"text\"\r\n                        value={typePet}\r\n                        style={{\r\n                            border: errors.typePet\r\n                                ? '1px solid var(--red)'\r\n                                : isTypeValid && !errors.typePet\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z]{2,16}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsTypeValid(isValid);\r\n                            setTypePet(e.target.value);\r\n                            if (isValid) {\r\n                                errors.typePet = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isTypeValid && !errors.typePet && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.typePet && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.typePet.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsTypeValid(false);\r\n                                    setTypePet('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <WrapperNextBackButton>\r\n                    <ButtonTransparent addPet onClick={() => beforeForm()}>\r\n                        <BiArrowBack /> {stepNumber > 1 ? 'Back' : 'Cancel'}\r\n                    </ButtonTransparent>\r\n                    <Button stepNumber={stepNumber} addPet type=\"submit\">\r\n                        {stepNumber > 2 ? 'Done' : 'Next'} {iconPawprint}\r\n                    </Button>\r\n                </WrapperNextBackButton>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport {\r\n    ButtonSex,\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    ImagePet,\r\n    ImageWrapper,\r\n    InputForAddPet,\r\n    InputUploadImage,\r\n    ItemOption,\r\n    LabelForAdd,\r\n    LabelForAddImage,\r\n    ListOption,\r\n    PlusImage,\r\n    TextValidation,\r\n    Textarea,\r\n    Title,\r\n    TypeInput,\r\n    WrapperForInputInMoreInformationOne,\r\n    WrapperForInputInMoreInformationTwo,\r\n    WrapperForMoreInformation,\r\n    WrapperForProgresMoreInformation,\r\n    WrapperNextBackButton,\r\n} from '../../../Forms.styled';\r\nimport { Button, ButtonTransparent } from '../../../../Button/Button';\r\nimport { BiArrowBack } from 'react-icons/bi';\r\nimport {\r\n    IconCross,\r\n    iconFemale,\r\n    iconMale,\r\n    iconPawprint,\r\n} from '../../../../../images/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\nconst schema = object({\r\n    coment: string()\r\n        .required('Comment is required')\r\n        .matches(\r\n            /^[a-zA-Z0-9\\s\\W]{0,120}$/,\r\n            'Comment max 120 characters, letters, numbers, symbols allowed'\r\n        )\r\n        .max(120, 'Comment must be at most 120 characters'),\r\n    location: string()\r\n        .required('Location is required')\r\n        .matches(\r\n            /^[A-Za-z\\s]+$/,\r\n            \"The string may contain only letters and spaces. Examples: 'Kyiv,' 'New York,' 'San Francisco.'\"\r\n        ),\r\n    price: string()\r\n        .required('Price is required')\r\n        .matches(\r\n            /^[1-9]\\d*$/,\r\n            'Comment max 120 characters, letters, numbers, symbols allowed'\r\n        ),\r\n}).required();\r\n\r\nexport default function MoreInfo({\r\n    children,\r\n    beforeForm,\r\n    stepNumber,\r\n    deliveryDataPet,\r\n}) {\r\n    const [isComentValid, setIsComentValid] = useState(false);\r\n    const [coment, setComent] = useLocalStorage('comentSell', '');\r\n    const [isLocationValid, setIsLocationValid] = useState(false);\r\n    const [location, setLocation] = useLocalStorage('locationSell', '');\r\n    const [isPriceValid, setIsPriceValid] = useState(false);\r\n    const [price, setPrice] = useLocalStorage('priceSell', '');\r\n    const [imageURL, setImageURL] = useLocalStorage('imageUrlSell', '');\r\n    const [imageError, setImageError] = useState(null);\r\n    const [activeError, setActiveError] = useState(null);\r\n    const [active, setActive] = useLocalStorage('activeSell', '');\r\n\r\n    const { language } = useAll();\r\n    const [lang, setLang] = useState(langUA);\r\n\r\n    useEffect(() => {\r\n        setLang(language === 'english' ? langEN : langUA);\r\n    }, [language]);\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            coment: coment || '',\r\n            imageURL: imageURL || '',\r\n            location: location || '',\r\n            price: price || '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const handleImageChange = e => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (file.size > 3 * 1024 * 1024) {\r\n                setImageError('Image size should be less than 3MB');\r\n            } else {\r\n                setImageError(null);\r\n                setImageURL(URL.createObjectURL(file));\r\n            }\r\n        }\r\n    };\r\n\r\n    const reset = () => {\r\n        setComent('');\r\n        setIsComentValid(false);\r\n        setLocation('');\r\n        setIsLocationValid(false);\r\n        setPrice('');\r\n        setIsPriceValid(false);\r\n        setImageError(null);\r\n        setImageURL('');\r\n        setActive('');\r\n    };\r\n    const deliveryData = data => {\r\n        if (active === '') {\r\n            setActiveError('Sex required');\r\n            return;\r\n        }\r\n        const { imageURL, coment } = data;\r\n        const image = imageURL[0];\r\n        deliveryDataPet({\r\n            comments: coment,\r\n            petAvatar: image,\r\n            category: 'sell',\r\n            location,\r\n            sex: active,\r\n            price,\r\n        });\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form addPetMoreInformation addPet>\r\n            <Title addPet addPetMoreInformation>\r\n                {' '}\r\n                {lang.addpetforsale}{' '}\r\n            </Title>\r\n            <WrapperForProgresMoreInformation>\r\n                {children}\r\n            </WrapperForProgresMoreInformation>\r\n            <form\r\n                onSubmit={handleSubmit(deliveryData)}\r\n                encType=\"multipart/form-data\"\r\n                style={{ marginTop: '16px' }}\r\n            >\r\n                <WrapperForMoreInformation addPetMoreInformation>\r\n                    <WrapperForInputInMoreInformationOne>\r\n                        <TypeInput>{lang.thesex}</TypeInput>\r\n                        <ListOption addPetMoreInformation>\r\n                            <ItemOption addPetMoreInformation>\r\n                                <ButtonSex\r\n                                    activeSex={active}\r\n                                    sex={'female'}\r\n                                    addPetMoreInformation\r\n                                    onClick={() => setActive('female')}\r\n                                    type=\"button\"\r\n                                >\r\n                                    {iconFemale} {lang.female}\r\n                                </ButtonSex>\r\n                            </ItemOption>\r\n                            <ItemOption addPetMoreInformation>\r\n                                <ButtonSex\r\n                                    activeSex={active}\r\n                                    sex={'male'}\r\n                                    onClick={() => setActive('male')}\r\n                                    type=\"button\"\r\n                                >\r\n                                    {iconMale} {lang.male}\r\n                                </ButtonSex>\r\n                            </ItemOption>\r\n                        </ListOption>\r\n                        {activeError && (\r\n                            <TextValidation activeSex>\r\n                                {activeError}\r\n                            </TextValidation>\r\n                        )}\r\n                        <LabelForAddImage addPetMoreInformation>\r\n                            <TypeInput addImage addPetMoreInformation>\r\n                                {lang.loadimg}\r\n                            </TypeInput>\r\n                            <ImageWrapper>\r\n                                <InputUploadImage\r\n                                    {...register('imageURL')}\r\n                                    aria-invalid={\r\n                                        errors.imageURL ? 'true' : 'false'\r\n                                    }\r\n                                    type=\"file\"\r\n                                    required\r\n                                    onChange={handleImageChange}\r\n                                ></InputUploadImage>\r\n                                {!imageURL && (\r\n                                    <>\r\n                                        <PlusImage\r\n                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            viewBox=\"0 0 182 182\"\r\n                                            fill=\"none\"\r\n                                        >\r\n                                            <rect\r\n                                                width=\"182\"\r\n                                                height=\"182\"\r\n                                                rx=\"40\"\r\n                                                fill=\"#CCE4FB\"\r\n                                            />\r\n                                            <path\r\n                                                d=\"M92 115V91M92 91V67M92 91H116.375M92 91H67.625\"\r\n                                                stroke=\"#54ADFF\"\r\n                                            />\r\n                                        </PlusImage>\r\n                                    </>\r\n                                )}\r\n                                {imageURL && <ImagePet src={imageURL} />}\r\n                            </ImageWrapper>\r\n                            {imageError && (\r\n                                <TextValidation>{imageError}</TextValidation>\r\n                            )}\r\n                        </LabelForAddImage>\r\n                    </WrapperForInputInMoreInformationOne>\r\n                    <WrapperForInputInMoreInformationTwo>\r\n                        <LabelForAdd>\r\n                            <TypeInput>{lang.location}</TypeInput>\r\n                            <InputForAddPet\r\n                                {...register('location')}\r\n                                aria-invalid={\r\n                                    errors.location ? 'true' : 'false'\r\n                                }\r\n                                placeholder={lang.typelocation}\r\n                                type=\"text\"\r\n                                value={location}\r\n                                style={{\r\n                                    border: errors.location\r\n                                        ? '1px solid var(--red)'\r\n                                        : isLocationValid && !errors.location\r\n                                        ? '1px solid var(--green)'\r\n                                        : '1px solid var(--blue)',\r\n                                }}\r\n                                onChange={e => {\r\n                                    const isValid = /^[A-Za-z\\s]+$/.test(\r\n                                        e.target.value\r\n                                    );\r\n                                    setIsLocationValid(isValid);\r\n                                    setLocation(e.target.value);\r\n                                    if (isValid) {\r\n                                        errors.location = undefined;\r\n                                    }\r\n                                }}\r\n                            ></InputForAddPet>\r\n                            {isLocationValid && !errors.location && (\r\n                                <IconOkey\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"24\"\r\n                                    height=\"24\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    addPet\r\n                                    addPetMoreInformation\r\n                                >\r\n                                    <path\r\n                                        d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                        stroke=\"#00C3AD\"\r\n                                    />\r\n                                </IconOkey>\r\n                            )}\r\n                            {errors.location && (\r\n                                <>\r\n                                    <TextValidation addPet>\r\n                                        {errors.location.message}\r\n                                    </TextValidation>\r\n                                    <IconCrossValidate\r\n                                        addPetMoreInformation\r\n                                        onClick={() => {\r\n                                            setIsLocationValid(false);\r\n                                            setLocation('');\r\n                                        }}\r\n                                        type=\"button\"\r\n                                        addPet\r\n                                    >\r\n                                        {IconCross}\r\n                                    </IconCrossValidate>\r\n                                </>\r\n                            )}\r\n                        </LabelForAdd>\r\n                        <LabelForAdd>\r\n                            <TypeInput>{lang.price}</TypeInput>\r\n                            <InputForAddPet\r\n                                {...register('price')}\r\n                                aria-invalid={errors.price ? 'true' : 'false'}\r\n                                placeholder={lang.typeofprice}\r\n                                type=\"text\"\r\n                                value={price}\r\n                                style={{\r\n                                    border: errors.price\r\n                                        ? '1px solid var(--red)'\r\n                                        : isPriceValid && !errors.price\r\n                                        ? '1px solid var(--green)'\r\n                                        : '1px solid var(--blue)',\r\n                                }}\r\n                                onChange={e => {\r\n                                    const isValid = /^[1-9]\\d*$/.test(\r\n                                        e.target.value\r\n                                    );\r\n                                    setIsPriceValid(isValid);\r\n                                    setPrice(e.target.value);\r\n                                    if (isValid) {\r\n                                        errors.price = undefined;\r\n                                    }\r\n                                }}\r\n                            ></InputForAddPet>\r\n                            {isPriceValid && !errors.price && (\r\n                                <IconOkey\r\n                                    addPetMoreInformation\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"24\"\r\n                                    height=\"24\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    addPet\r\n                                >\r\n                                    <path\r\n                                        d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                        stroke=\"#00C3AD\"\r\n                                    />\r\n                                </IconOkey>\r\n                            )}\r\n                            {errors.price && (\r\n                                <>\r\n                                    <TextValidation addPet>\r\n                                        {errors.price.message}\r\n                                    </TextValidation>\r\n                                    <IconCrossValidate\r\n                                        addPetMoreInformation\r\n                                        onClick={() => {\r\n                                            setIsPriceValid(false);\r\n                                            setPrice('');\r\n                                        }}\r\n                                        type=\"button\"\r\n                                        addPet\r\n                                    >\r\n                                        {IconCross}\r\n                                    </IconCrossValidate>\r\n                                </>\r\n                            )}\r\n                        </LabelForAdd>\r\n                        <LabelForAdd coment addPetMoreInformation>\r\n                            <TypeInput>{lang.comments}</TypeInput>\r\n                            <Textarea\r\n                                {...register('coment')}\r\n                                aria-invalid={errors.coment ? 'true' : 'false'}\r\n                                {...register('coment', {\r\n                                    maxLength: 120,\r\n                                })}\r\n                                placeholder={lang.typecomment}\r\n                                type=\"text\"\r\n                                value={coment}\r\n                                spellCheck=\"false\"\r\n                                data-grame=\"false\"\r\n                                style={{\r\n                                    border: errors.coment\r\n                                        ? '1px solid var(--red)'\r\n                                        : isComentValid && !errors.coment\r\n                                        ? '1px solid var(--green)'\r\n                                        : '1px solid var(--blue)',\r\n                                }}\r\n                                onChange={e => {\r\n                                    const isValid =\r\n                                        /^[a-zA-Z0-9\\s\\W]{0,120}$/.test(\r\n                                            e.target.value\r\n                                        );\r\n                                    setIsComentValid(isValid);\r\n                                    setComent(e.target.value);\r\n                                    const textarea = e.target;\r\n                                    textarea.style.height = 'auto';\r\n                                    textarea.style.height =\r\n                                        textarea.scrollHeight + 'px';\r\n                                    if (isValid) {\r\n                                        errors.coment = undefined;\r\n                                    }\r\n                                }}\r\n                            ></Textarea>\r\n\r\n                            {isComentValid && !errors.coment && (\r\n                                <IconOkey\r\n                                    addPetMoreInformation\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"24\"\r\n                                    height=\"24\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    addPet\r\n                                >\r\n                                    <path\r\n                                        d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                        stroke=\"#00C3AD\"\r\n                                    />\r\n                                </IconOkey>\r\n                            )}\r\n                            {errors.coment && (\r\n                                <>\r\n                                    <TextValidation addPet>\r\n                                        {errors.coment.message}\r\n                                    </TextValidation>\r\n                                    <IconCrossValidate\r\n                                        addPetMoreInformation\r\n                                        onClick={() => {\r\n                                            setIsComentValid(false);\r\n                                            setComent('');\r\n                                        }}\r\n                                        type=\"button\"\r\n                                        addPet\r\n                                    >\r\n                                        {IconCross}\r\n                                    </IconCrossValidate>\r\n                                </>\r\n                            )}\r\n                        </LabelForAdd>\r\n                    </WrapperForInputInMoreInformationTwo>\r\n                </WrapperForMoreInformation>\r\n                <WrapperNextBackButton addPetMoreInformation>\r\n                    <ButtonTransparent\r\n                        className=\"back\"\r\n                        addPet\r\n                        onClick={() => beforeForm()}\r\n                    >\r\n                        <BiArrowBack />{' '}\r\n                        {stepNumber > 1 ? lang.back : lang.cancel}\r\n                    </ButtonTransparent>\r\n                    <Button\r\n                        className=\"done\"\r\n                        stepNumber={stepNumber}\r\n                        addPet\r\n                        addPetMoreInformation\r\n                        type=\"submit\"\r\n                    >\r\n                        {stepNumber > 2 ? lang.done : lang.next} {iconPawprint}\r\n                    </Button>\r\n                </WrapperNextBackButton>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import React, { useRef } from 'react';\r\nimport PersonalDetails from './PersonalDetails/PersonalDetails';\r\nimport MoreInfo from './MoreInfo/MoreInfo';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport operations from 'redux/notices/notices-operations';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default function AddSellPet({\r\n    children,\r\n    nextForm,\r\n    beforeForm,\r\n    stepNumber,\r\n    state,\r\n    clearStepNumber,\r\n    clearData,\r\n}) {\r\n    const [pet, setPet] = useLocalStorage(\"dataSellPet\", {});\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const backLinkLocation = useRef(state?.from ?? '/');\r\n    \r\n    const deliveryDataPet = data => {\r\n        setPet(prevState => {\r\n            return { ...prevState, ...data };\r\n        });\r\n        if (stepNumber === 3) {\r\n            const formData = new FormData();\r\n            for (const key in { ...pet, ...data }) {\r\n                formData.append(key, { ...pet, ...data }[key]);\r\n            }\r\n            dispatch(operations.fetchAddNotice(formData)).then(() => {\r\n                toast.success(`Pet added successfully`);\r\n            })\r\n            .catch(() => {\r\n                toast.error('Something went wrong');\r\n            });\r\n            navigate(backLinkLocation.current);\r\n            clearStepNumber();\r\n            clearData(\"dataSellPet\");\r\n        }\r\n    };\r\n    \r\n    return (    \r\n        <>\r\n            {stepNumber === 2 && (\r\n                <PersonalDetails\r\n                    children={children}\r\n                    nextForm={nextForm}\r\n                    beforeForm={beforeForm}\r\n                    stepNumber={stepNumber}\r\n                    deliveryDataPet={deliveryDataPet}\r\n                />\r\n            )}\r\n            {stepNumber === 3 && (\r\n                <MoreInfo\r\n                    children={children}\r\n                    nextForm={nextForm}\r\n                    beforeForm={beforeForm}\r\n                    stepNumber={stepNumber}\r\n                    deliveryDataPet={deliveryDataPet}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import {  useEffect, useState } from 'react';\r\nimport {\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    InputForAddPet,\r\n    LabelForAdd,\r\n    TextValidation,\r\n    Title,\r\n    TypeInput,\r\n    WrapperNextBackButton,\r\n} from '../../../Forms.styled';\r\nimport { Button, ButtonTransparent } from '../../../../Button/Button';\r\nimport { BiArrowBack } from 'react-icons/bi';\r\nimport { IconCross, iconPawprint } from '../../../../../images/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\nconst schema = object({\r\n    title: string()\r\n        .required('Title is required')\r\n        .min(2, 'Title should be at least 2 characters')\r\n        .max(50, 'Title should not exceed 50 characters')\r\n        .matches(\r\n            /^[a-zA-Zа-яА-Я0-9\\s]+$/,\r\n            'Title should contain only letters, numbers, and spaces'\r\n        ),\r\n    name: string()\r\n        .required()\r\n        .min(2, 'Name should be at least 2 characters')\r\n        .max(16, 'Name should not exceed 16 characters')\r\n        .matches(\r\n            /^[a-zA-Z]{2,16}$/,\r\n            'Name should contain only letters and without spaces'\r\n        ),\r\n    birth: string()\r\n        .required()\r\n        .matches(\r\n            /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(0[0-9]{1,3}|20[0-2][0-3])$/,\r\n            'Enter a valid date in DD-MM-YYYY format'\r\n        ),\r\n    typePet: string()\r\n        .required()\r\n        .min(2)\r\n        .max(16)\r\n        .matches(/^[a-zA-Z]{2,16}$/, 'Type should contain only letters'),\r\n}).required();\r\n\r\nexport default function PersonalDetails({\r\n    children,\r\n    nextForm,\r\n    beforeForm,\r\n    stepNumber,\r\n    deliveryDataPet,\r\n}) {\r\n    const [isNameValid, setIsNameValid] = useState(false);\r\n    const [isBirthValid, setIsBirthValid] = useState(false);\r\n    const [isTypeValid, setIsTypeValid] = useState(false);\r\n    const [isTitleValid, setIsTitleValid] = useState(false);\r\n    const [title, setTitle] = useLocalStorage('titleLost', '');\r\n    const [name, setName] = useLocalStorage('nameLost', '');\r\n    const [birth, setBirth] = useLocalStorage('birthLost', '');\r\n    const [typePet, setTypePet] = useLocalStorage('typeLost', '');\r\n\r\n    const { language} = useAll()\r\n    const [lang, setLang] = useState(langUA)\r\n\r\n    useEffect(() => {\r\n      setLang(language === 'english' ?  langEN :  langUA);\r\n    }, [language])\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            name: name || '',\r\n            birth: birth ||'',\r\n            typePet: typePet || '',\r\n            title: title || '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n    const reset = () => {\r\n        setName('');\r\n        setBirth('');\r\n        setTypePet('');\r\n        setTitle('');\r\n        setIsTitleValid(false);\r\n        setIsNameValid(false);\r\n        setIsBirthValid(false);\r\n        setIsTypeValid(false);\r\n    };\r\n    const deliveryData = data => {\r\n        const { name, birth, typePet, title } = data;\r\n        deliveryDataPet({ name, birthday: birth, type: typePet, title });\r\n        nextForm();\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form addPet>\r\n            <Title addPet> {lang.addLostPet} </Title>\r\n            {children}\r\n            <form\r\n                onSubmit={handleSubmit(deliveryData)}\r\n                style={{ marginTop: '16px' }}\r\n            >\r\n                <LabelForAdd>\r\n                    <TypeInput> {lang.titleofadd} </TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('title')}\r\n                        aria-invalid={errors.title ? 'true' : 'false'}\r\n                        placeholder={lang.typetitle}\r\n                        type=\"text\"\r\n                        value={title}\r\n                        style={{\r\n                            border: errors.title\r\n                                ? '1px solid var(--red)'\r\n                                : isTitleValid && !errors.title\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Zа-яА-Я0-9\\s]+$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsTitleValid(isValid);\r\n                            setTitle(e.target.value);\r\n                            if (isValid) {\r\n                                errors.title = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isTitleValid && !errors.title && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.title && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.title.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsTitleValid(false);\r\n                                    setTitle('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd>\r\n                    <TypeInput>{lang.petsname}</TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('name')}\r\n                        aria-invalid={errors.name ? 'true' : 'false'}\r\n                        placeholder={lang.typename}\r\n                        type=\"text\"\r\n                        value={name}\r\n                        style={{\r\n                            border: errors.name\r\n                                ? '1px solid var(--red)'\r\n                                : isNameValid && !errors.name\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z]{2,16}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsNameValid(isValid);\r\n                            setName(e.target.value);\r\n                            if (isValid) {\r\n                                errors.name = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isNameValid && !errors.name && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.name && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.name.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsNameValid(false);\r\n                                    setName('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd>\r\n                    <TypeInput> {lang.birthday}</TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('birth')}\r\n                        aria-invalid={errors.birth ? 'true' : 'false'}\r\n                        placeholder={lang.typebirth}\r\n                        type=\"text\"\r\n                        value={birth}\r\n                        style={{\r\n                            border: errors.birth\r\n                                ? '1px solid var(--red)'\r\n                                : isBirthValid && !errors.birth\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid =\r\n                                /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(0[0-9]{1,3}|20[0-2][0-3])$/.test(\r\n                                    e.target.value\r\n                                );\r\n                            setIsBirthValid(isValid);\r\n                            setBirth(e.target.value);\r\n                            if (isValid) {\r\n                                errors.birth = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isBirthValid && !errors.birth && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.birth && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.birth.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsBirthValid(false);\r\n                                    setBirth('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd yourPet>\r\n                    <TypeInput>{lang.type}</TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('typePet')}\r\n                        aria-invalid={errors.typePet ? 'true' : 'false'}\r\n                        placeholder={lang.typepet}\r\n                        type=\"text\"\r\n                        value={typePet}\r\n                        style={{\r\n                            border: errors.typePet\r\n                                ? '1px solid var(--red)'\r\n                                : isTypeValid && !errors.typePet\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z]{2,16}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsTypeValid(isValid);\r\n                            setTypePet(e.target.value);\r\n                            if (isValid) {\r\n                                errors.typePet = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isTypeValid && !errors.typePet && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.typePet && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.typePet.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsTypeValid(false);\r\n                                    setTypePet('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <WrapperNextBackButton>\r\n                    <ButtonTransparent addPet onClick={() => beforeForm()}>\r\n                        <BiArrowBack /> {stepNumber > 1 ? lang.back : lang.cancel}\r\n                    </ButtonTransparent>\r\n                    <Button stepNumber={stepNumber} addPet type=\"submit\">\r\n                        {stepNumber > 2 ? lang.done : lang.next} {iconPawprint}\r\n                    </Button>\r\n                </WrapperNextBackButton>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import {  useEffect, useState } from 'react';\r\nimport {\r\n    ButtonSex,\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    ImagePet,\r\n    ImageWrapper,\r\n    InputForAddPet,\r\n    InputUploadImage,\r\n    ItemOption,\r\n    LabelForAdd,\r\n    LabelForAddImage,\r\n    ListOption,\r\n    PlusImage,\r\n    TextValidation,\r\n    Textarea,\r\n    Title,\r\n    TypeInput,\r\n    WrapperForInputInMoreInformationOne,\r\n    WrapperForInputInMoreInformationTwo,\r\n    WrapperForMoreInformation,\r\n    WrapperForProgresMoreInformation,\r\n    WrapperNextBackButton,\r\n} from '../../../Forms.styled';\r\nimport { Button, ButtonTransparent } from '../../../../Button/Button';\r\nimport { BiArrowBack } from 'react-icons/bi';\r\nimport {\r\n    IconCross,\r\n    iconFemale,\r\n    iconMale,\r\n    iconPawprint,\r\n} from '../../../../../images/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\nconst schema = object({\r\n    coment: string()\r\n        .required('Comment is required')\r\n        .matches(\r\n            /^[a-zA-Z0-9\\s\\W]{0,120}$/,\r\n            'Comment max 120 characters, letters, numbers, symbols allowed'\r\n        )\r\n        .max(120, 'Comment must be at most 120 characters'),\r\n    location: string()\r\n        .required('Location is required')\r\n        .matches(\r\n            /^[A-Za-z\\s]+$/,\r\n            \"The string may contain only letters and spaces. Examples: 'Kyiv,' 'New York,' 'San Francisco.'\"\r\n        )\r\n}).required();\r\n\r\nexport default function MoreInfo({\r\n    children,\r\n    beforeForm,\r\n    stepNumber,\r\n    deliveryDataPet,\r\n}) {\r\n    const [isComentValid, setIsComentValid] = useState(false);\r\n    const [coment, setComent] = useLocalStorage('comentLost', '');\r\n    const [isLocationValid, setIsLocationValid] = useState(false);\r\n    const [location, setLocation] = useLocalStorage('locationLost', '');\r\n    const [imageURL, setImageURL] = useLocalStorage('imageUrlLost', '');\r\n    const [imageError, setImageError] = useState(null);\r\n    const [activeError, setActiveError] = useState(null);\r\n    const [active, setActive] = useLocalStorage('activeLost', '');\r\n\r\n    const { language} = useAll()\r\n    const [lang, setLang] = useState(langUA)\r\n\r\n    useEffect(() => {\r\n      setLang(language === 'english' ?  langEN :  langUA);\r\n    }, [language])\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            coment: coment || '',\r\n            imageURL: imageURL || '',\r\n            location: location || '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const handleImageChange = e => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (file.size > 3 * 1024 * 1024) {\r\n                setImageError('Image size should be less than 3MB');\r\n            } else {\r\n                setImageError(null);\r\n                setImageURL(URL.createObjectURL(file));\r\n            }\r\n        }\r\n    };\r\n\r\n    const reset = () => {\r\n        setComent('');\r\n        setIsComentValid(false);\r\n        setLocation('');\r\n        setIsLocationValid(false);\r\n        setImageError(null);\r\n        setImageURL('');\r\n        setActive('');\r\n    };\r\n    const deliveryData = data => {\r\n        if (active === '') {\r\n            setActiveError('Sex required');\r\n            return;\r\n        }\r\n        const { imageURL, coment } = data;\r\n        const image = imageURL[0];\r\n        deliveryDataPet({\r\n            comments: coment,\r\n            petAvatar: image,\r\n            category: 'lost/found',\r\n            location,\r\n            sex: active,\r\n        });\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form addPetMoreInformation addPet>\r\n            <Title addPet addPetMoreInformation> {lang.addLostPet} </Title>\r\n            <WrapperForProgresMoreInformation>\r\n                {children}\r\n            </WrapperForProgresMoreInformation>\r\n            <form\r\n                onSubmit={handleSubmit(deliveryData)}\r\n                encType=\"multipart/form-data\"\r\n                style={{ marginTop: '16px' }}\r\n            >\r\n                <WrapperForMoreInformation addPetMoreInformation>\r\n                    <WrapperForInputInMoreInformationOne>\r\n                        <TypeInput> {lang.thesex} </TypeInput>\r\n                        <ListOption addPetMoreInformation>\r\n                            <ItemOption addPetMoreInformation>\r\n                                <ButtonSex\r\n                                    activeSex={active}\r\n                                    sex={'female'}\r\n                                    addPetMoreInformation\r\n                                    onClick={() => setActive('female')}\r\n                                    type=\"button\"\r\n                                >\r\n                                    {iconFemale} {lang.female}\r\n                                </ButtonSex>\r\n                            </ItemOption>\r\n                            <ItemOption addPetMoreInformation>\r\n                                <ButtonSex\r\n                                    activeSex={active}\r\n                                    sex={'male'}\r\n                                    onClick={() => setActive('male')}\r\n                                    type=\"button\"\r\n                                >\r\n                                    {iconMale} {lang.male}\r\n                                </ButtonSex>\r\n                            </ItemOption>\r\n                        </ListOption>\r\n                        {activeError && (\r\n                            <TextValidation activeSex>\r\n                                {activeError}\r\n                            </TextValidation>\r\n                        )}\r\n                        <LabelForAddImage addPetMoreInformation>\r\n                            <TypeInput addImage addPetMoreInformation>\r\n                                {lang.loadimg}\r\n                            </TypeInput>\r\n                            <ImageWrapper>\r\n                                <InputUploadImage\r\n                                    {...register('imageURL')}\r\n                                    aria-invalid={\r\n                                        errors.imageURL ? 'true' : 'false'\r\n                                    }\r\n                                    type=\"file\"\r\n                                    required\r\n                                    onChange={handleImageChange}\r\n                                ></InputUploadImage>\r\n                                {!imageURL && (\r\n                                    <>\r\n                                        <PlusImage\r\n                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            viewBox=\"0 0 182 182\"\r\n                                            fill=\"none\"\r\n                                        >\r\n                                            <rect\r\n                                                width=\"182\"\r\n                                                height=\"182\"\r\n                                                rx=\"40\"\r\n                                                fill=\"#CCE4FB\"\r\n                                            />\r\n                                            <path\r\n                                                d=\"M92 115V91M92 91V67M92 91H116.375M92 91H67.625\"\r\n                                                stroke=\"#54ADFF\"\r\n                                            />\r\n                                        </PlusImage>\r\n                                    </>\r\n                                )}\r\n                                {imageURL && <ImagePet src={imageURL} />}\r\n                            </ImageWrapper>\r\n                            {imageError && (\r\n                                <TextValidation>{imageError}</TextValidation>\r\n                            )}\r\n                        </LabelForAddImage>\r\n                    </WrapperForInputInMoreInformationOne>\r\n                    <WrapperForInputInMoreInformationTwo>\r\n                        <LabelForAdd>\r\n                            <TypeInput> {lang.location} </TypeInput>\r\n                            <InputForAddPet\r\n                                {...register('location')}\r\n                                aria-invalid={\r\n                                    errors.location ? 'true' : 'false'\r\n                                }\r\n                                placeholder={lang.typelocation}\r\n                                type=\"text\"\r\n                                value={location}\r\n                                style={{\r\n                                    border: errors.location\r\n                                        ? '1px solid var(--red)'\r\n                                        : isLocationValid && !errors.location\r\n                                        ? '1px solid var(--green)'\r\n                                        : '1px solid var(--blue)',\r\n                                }}\r\n                                onChange={e => {\r\n                                    const isValid = /^[A-Za-z\\s]+$/.test(\r\n                                        e.target.value\r\n                                    );\r\n                                    setIsLocationValid(isValid);\r\n                                    setLocation(e.target.value);\r\n                                    if (isValid) {\r\n                                        errors.location = undefined;\r\n                                    }\r\n                                }}\r\n                            ></InputForAddPet>\r\n                            {isLocationValid && !errors.location && (\r\n                                <IconOkey\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"24\"\r\n                                    height=\"24\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    addPet\r\n                                    addPetMoreInformation\r\n                                >\r\n                                    <path\r\n                                        d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                        stroke=\"#00C3AD\"\r\n                                    />\r\n                                </IconOkey>\r\n                            )}\r\n                            {errors.location && (\r\n                                <>\r\n                                    <TextValidation addPet>\r\n                                        {errors.location.message}\r\n                                    </TextValidation>\r\n                                    <IconCrossValidate\r\n                                        addPetMoreInformation\r\n                                        onClick={() => {\r\n                                            setIsLocationValid(false);\r\n                                            setLocation('');\r\n                                        }}\r\n                                        type=\"button\"\r\n                                        addPet\r\n                                    >\r\n                                        {IconCross}\r\n                                    </IconCrossValidate>\r\n                                </>\r\n                            )}\r\n                        </LabelForAdd>\r\n                        <LabelForAdd coment addPetMoreInformation>\r\n                            <TypeInput> {lang.comments} </TypeInput>\r\n                            <Textarea\r\n                                withOutPrice\r\n                                {...register('coment')}\r\n                                aria-invalid={errors.coment ? 'true' : 'false'}\r\n                                {...register('coment', {\r\n                                    maxLength: 120,\r\n                                })}\r\n                                placeholder={lang.typecomment}                                type=\"text\"\r\n                                value={coment}\r\n                                spellCheck=\"false\"\r\n                                data-grame=\"false\"\r\n                                style={{\r\n                                    border: errors.coment\r\n                                        ? '1px solid var(--red)'\r\n                                        : isComentValid && !errors.coment\r\n                                        ? '1px solid var(--green)'\r\n                                        : '1px solid var(--blue)',\r\n                                }}\r\n                                onChange={e => {\r\n                                    const isValid =\r\n                                        /^[a-zA-Z0-9\\s\\W]{0,120}$/.test(\r\n                                            e.target.value\r\n                                        );\r\n                                    setIsComentValid(isValid);\r\n                                    setComent(e.target.value);\r\n                                    const textarea = e.target;\r\n                                    textarea.style.height = 'auto';\r\n                                    textarea.style.height =\r\n                                        textarea.scrollHeight + 'px';\r\n                                    if (isValid) {\r\n                                        errors.coment = undefined;\r\n                                    }\r\n                                }}\r\n                            ></Textarea>\r\n\r\n                            {isComentValid && !errors.coment && (\r\n                                <IconOkey\r\n                                    addPetMoreInformation\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"24\"\r\n                                    height=\"24\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    addPet\r\n                                >\r\n                                    <path\r\n                                        d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                        stroke=\"#00C3AD\"\r\n                                    />\r\n                                </IconOkey>\r\n                            )}\r\n                            {errors.coment && (\r\n                                <>\r\n                                    <TextValidation addPet>\r\n                                        {errors.coment.message}\r\n                                    </TextValidation>\r\n                                    <IconCrossValidate\r\n                                        addPetMoreInformation\r\n                                        onClick={() => {\r\n                                            setIsComentValid(false);\r\n                                            setComent('');\r\n                                        }}\r\n                                        type=\"button\"\r\n                                        addPet\r\n                                    >\r\n                                        {IconCross}\r\n                                    </IconCrossValidate>\r\n                                </>\r\n                            )}\r\n                        </LabelForAdd>\r\n                    </WrapperForInputInMoreInformationTwo>\r\n                </WrapperForMoreInformation>\r\n                <WrapperNextBackButton addPetMoreInformation>\r\n                    <ButtonTransparent addPet onClick={() => beforeForm()}>\r\n                        <BiArrowBack /> {stepNumber > 1 ? lang.back : lang.cancel}\r\n                    </ButtonTransparent>\r\n                    <Button\r\n                        stepNumber={stepNumber}\r\n                        addPet\r\n                        addPetMoreInformation\r\n                        type=\"submit\"\r\n                    >\r\n                        {stepNumber > 2 ? lang.done : lang.next} {iconPawprint}\r\n                    </Button>\r\n                </WrapperNextBackButton>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import React, { useRef } from 'react';\r\nimport PersonalDetails from './PersonalDetails/PersonalDetails';\r\nimport MoreInfo from './MoreInfo/MoreInfo';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport operations from 'redux/notices/notices-operations';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default function AddLostPet({\r\n    children,\r\n    nextForm,\r\n    beforeForm,\r\n    stepNumber,\r\n    state,\r\n    clearStepNumber,\r\n    clearData\r\n}) {\r\n    const [pet, setPet] = useLocalStorage(\"dataYourPet\", {});\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const backLinkLocation = useRef(state?.from ?? '/');\r\n    const deliveryDataPet = data => {\r\n        setPet(prevState => {\r\n            return { ...prevState, ...data };\r\n        });\r\n        if (stepNumber === 3) {\r\n            const formData = new FormData();\r\n            for (const key in { ...pet, ...data }) {\r\n                formData.append(key, { ...pet, ...data }[key]);\r\n            }\r\n            dispatch(operations.fetchAddNotice(formData)).then(() => {\r\n                toast.success(`Pet added successfully`);\r\n            })\r\n            .catch(() => {\r\n                toast.error('Something went wrong');\r\n            });\r\n            navigate(backLinkLocation.current);\r\n            clearStepNumber();\r\n            clearData(\"dataSellPet\");\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n        {stepNumber === 2 && (\r\n            <PersonalDetails\r\n                children={children}\r\n                nextForm={nextForm}\r\n                beforeForm={beforeForm}\r\n                stepNumber={stepNumber}\r\n                deliveryDataPet={deliveryDataPet}\r\n            />\r\n        )}\r\n        {stepNumber === 3 && (\r\n            <MoreInfo\r\n                children={children}\r\n                nextForm={nextForm}\r\n                beforeForm={beforeForm}\r\n                stepNumber={stepNumber}\r\n                deliveryDataPet={deliveryDataPet}\r\n            />\r\n        )}\r\n    </>\r\n    );\r\n}\r\n","import {  useEffect, useState } from 'react';\r\nimport {\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    InputForAddPet,\r\n    LabelForAdd,\r\n    TextValidation,\r\n    Title,\r\n    TypeInput,\r\n    WrapperNextBackButton,\r\n} from '../../../Forms.styled';\r\nimport { Button, ButtonTransparent } from '../../../../Button/Button';\r\nimport { BiArrowBack } from 'react-icons/bi';\r\nimport { IconCross, iconPawprint } from '../../../../../images/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\n\r\nconst schema = object({\r\n    title: string()\r\n        .required('Title is required')\r\n        .min(2, 'Title should be at least 2 characters')\r\n        .max(50, 'Title should not exceed 50 characters')\r\n        .matches(\r\n            /^[a-zA-Zа-яА-Я0-9\\s]+$/,\r\n            'Title should contain only letters, numbers, and spaces'\r\n        ),\r\n    name: string()\r\n        .required()\r\n        .min(2, 'Name should be at least 2 characters')\r\n        .max(16, 'Name should not exceed 16 characters')\r\n        .matches(\r\n            /^[a-zA-Z]{2,16}$/,\r\n            'Name should contain only letters and without spaces'\r\n        ),\r\n    birth: string()\r\n        .required()\r\n        .matches(\r\n            /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(0[0-9]{1,3}|20[0-2][0-3])$/,\r\n            'Enter a valid date in DD-MM-YYYY format'\r\n        ),\r\n    typePet: string()\r\n        .required()\r\n        .min(2)\r\n        .max(16)\r\n        .matches(/^[a-zA-Z]{2,16}$/, 'Type should contain only letters'),\r\n}).required();\r\n\r\nexport default function PersonalDetails({\r\n    children,\r\n    nextForm,\r\n    beforeForm,\r\n    stepNumber,\r\n    deliveryDataPet,\r\n}) {\r\n    const [isNameValid, setIsNameValid] = useState(false);\r\n    const [isBirthValid, setIsBirthValid] = useState(false);\r\n    const [isTypeValid, setIsTypeValid] = useState(false);\r\n    const [isTitleValid, setIsTitleValid] = useState(false);\r\n    const [title, setTitle] = useLocalStorage('titleHands', '');\r\n    const [name, setName] = useLocalStorage('nameHands', '');\r\n    const [birth, setBirth] = useLocalStorage('birthHands', '');\r\n    const [typePet, setTypePet] = useLocalStorage('typeHands', '');\r\n\r\n    const { language} = useAll()\r\nconst [lang, setLang] = useState(langUA)\r\n\r\nuseEffect(() => {\r\n  setLang(language === 'english' ?  langEN :  langUA);\r\n}, [language])\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            name: name || '',\r\n            birth: birth ||'',\r\n            typePet: typePet || '',\r\n            title: title || '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n    const reset = () => {\r\n        setName('');\r\n        setBirth('');\r\n        setTypePet('');\r\n        setTitle('');\r\n        setIsTitleValid(false);\r\n        setIsNameValid(false);\r\n        setIsBirthValid(false);\r\n        setIsTypeValid(false);\r\n    };\r\n    const deliveryData = data => {\r\n        const { name, birth, typePet, title } = data;\r\n        deliveryDataPet({ name, birthday: birth, type: typePet, title });\r\n        nextForm();\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form addPet>\r\n            <Title addPet> {lang.addGood} </Title>\r\n            {children}\r\n            <form\r\n                onSubmit={handleSubmit(deliveryData)}\r\n                style={{ marginTop: '16px' }}\r\n            >\r\n                <LabelForAdd>\r\n                    <TypeInput> {lang.titleofadd} </TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('title')}\r\n                        aria-invalid={errors.title ? 'true' : 'false'}\r\n                        placeholder={lang.typetitle}\r\n                        type=\"text\"\r\n                        value={title}\r\n                        style={{\r\n                            border: errors.title\r\n                                ? '1px solid var(--red)'\r\n                                : isTitleValid && !errors.title\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Zа-яА-Я0-9\\s]+$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsTitleValid(isValid);\r\n                            setTitle(e.target.value);\r\n                            if (isValid) {\r\n                                errors.title = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isTitleValid && !errors.title && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.title && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.title.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsTitleValid(false);\r\n                                    setTitle('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd>\r\n                    <TypeInput> {lang.petsname} </TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('name')}\r\n                        aria-invalid={errors.name ? 'true' : 'false'}\r\n                        placeholder={lang.typename}\r\n                        type=\"text\"\r\n                        value={name}\r\n                        style={{\r\n                            border: errors.name\r\n                                ? '1px solid var(--red)'\r\n                                : isNameValid && !errors.name\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z]{2,16}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsNameValid(isValid);\r\n                            setName(e.target.value);\r\n                            if (isValid) {\r\n                                errors.name = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isNameValid && !errors.name && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.name && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.name.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsNameValid(false);\r\n                                    setName('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd>\r\n                    <TypeInput> {lang.birthday} </TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('birth')}\r\n                        aria-invalid={errors.birth ? 'true' : 'false'}\r\n                        placeholder={lang.typebirth}\r\n                        type=\"text\"\r\n                        value={birth}\r\n                        style={{\r\n                            border: errors.birth\r\n                                ? '1px solid var(--red)'\r\n                                : isBirthValid && !errors.birth\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid =\r\n                                /^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(0[0-9]{1,3}|20[0-2][0-3])$/.test(\r\n                                    e.target.value\r\n                                );\r\n                            setIsBirthValid(isValid);\r\n                            setBirth(e.target.value);\r\n                            if (isValid) {\r\n                                errors.birth = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isBirthValid && !errors.birth && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.birth && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.birth.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsBirthValid(false);\r\n                                    setBirth('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <LabelForAdd yourPet>\r\n                    <TypeInput> {lang.type} </TypeInput>\r\n                    <InputForAddPet\r\n                        {...register('typePet')}\r\n                        aria-invalid={errors.typePet ? 'true' : 'false'}\r\n                        placeholder={lang.typepet}\r\n                        type=\"text\"\r\n                        value={typePet}\r\n                        style={{\r\n                            border: errors.typePet\r\n                                ? '1px solid var(--red)'\r\n                                : isTypeValid && !errors.typePet\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z]{2,16}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsTypeValid(isValid);\r\n                            setTypePet(e.target.value);\r\n                            if (isValid) {\r\n                                errors.typePet = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAddPet>\r\n                    {isTypeValid && !errors.typePet && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            addPet\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.typePet && (\r\n                        <>\r\n                            <TextValidation addPet>\r\n                                {errors.typePet.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsTypeValid(false);\r\n                                    setTypePet('');\r\n                                }}\r\n                                type=\"button\"\r\n                                addPet\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForAdd>\r\n                <WrapperNextBackButton>\r\n                    <ButtonTransparent addPet onClick={() => beforeForm()}>\r\n                        <BiArrowBack /> {stepNumber > 1 ? lang.back : lang.cancel}\r\n                    </ButtonTransparent>\r\n                    <Button stepNumber={stepNumber} addPet type=\"submit\">\r\n                        {stepNumber > 2 ? lang.done : lang.next} {iconPawprint}\r\n                    </Button>\r\n                </WrapperNextBackButton>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import {  useEffect, useState } from 'react';\r\nimport {\r\n    ButtonSex,\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    ImagePet,\r\n    ImageWrapper,\r\n    InputForAddPet,\r\n    InputUploadImage,\r\n    ItemOption,\r\n    LabelForAdd,\r\n    LabelForAddImage,\r\n    ListOption,\r\n    PlusImage,\r\n    TextValidation,\r\n    Textarea,\r\n    Title,\r\n    TypeInput,\r\n    WrapperForInputInMoreInformationOne,\r\n    WrapperForInputInMoreInformationTwo,\r\n    WrapperForMoreInformation,\r\n    WrapperForProgresMoreInformation,\r\n    WrapperNextBackButton,\r\n} from '../../../Forms.styled';\r\nimport { Button, ButtonTransparent } from '../../../../Button/Button';\r\nimport { BiArrowBack } from 'react-icons/bi';\r\nimport {\r\n    IconCross,\r\n    iconFemale,\r\n    iconMale,\r\n    iconPawprint,\r\n} from '../../../../../images/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\nconst schema = object({\r\n    coment: string()\r\n        .required('Comment is required')\r\n        .matches(\r\n            /^[a-zA-Z0-9\\s\\W]{0,120}$/,\r\n            'Comment max 120 characters, letters, numbers, symbols allowed'\r\n        )\r\n        .max(120, 'Comment must be at most 120 characters'),\r\n    location: string()\r\n        .required('Location is required')\r\n        .matches(\r\n            /^[A-Za-z\\s]+$/,\r\n            \"The string may contain only letters and spaces. Examples: 'Kyiv,' 'New York,' 'San Francisco.'\"\r\n        )\r\n}).required();\r\n\r\nexport default function MoreInfo({\r\n    children,\r\n    beforeForm,\r\n    stepNumber,\r\n    deliveryDataPet,\r\n}) {\r\n    const [isComentValid, setIsComentValid] = useState(false);\r\n    const [coment, setComent] = useLocalStorage('comentHands', '');\r\n    const [isLocationValid, setIsLocationValid] = useState(false);\r\n    const [location, setLocation] = useLocalStorage('locationHands', '');\r\n    const [imageURL, setImageURL] = useLocalStorage('imageUrlHands', '');\r\n    const [imageError, setImageError] = useState(null);\r\n    const [activeError, setActiveError] = useState(null);\r\n    const [active, setActive] = useLocalStorage('activeHands', '');\r\n\r\n    const { language} = useAll()\r\n    const [lang, setLang] = useState(langUA)\r\n\r\n    useEffect(() => {\r\n      setLang(language === 'english' ?  langEN :  langUA);\r\n    }, [language])\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            coment: coment || '',\r\n            imageURL: imageURL || '',\r\n            location: location || '',\r\n            price: '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n\r\n    const handleImageChange = e => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (file.size > 3 * 1024 * 1024) {\r\n                setImageError('Image size should be less than 3MB');\r\n            } else {\r\n                setImageError(null);\r\n                setImageURL(URL.createObjectURL(file));\r\n            }\r\n        }\r\n    };\r\n\r\n    const reset = () => {\r\n        setComent('');\r\n        setIsComentValid(false);\r\n        setLocation('');\r\n        setIsLocationValid(false);\r\n        setImageError(null);\r\n        setImageURL('');\r\n        setActive('');\r\n    };\r\n    const deliveryData = data => {\r\n        if (active === '') {\r\n            setActiveError('Sex required');\r\n            return;\r\n        }\r\n        const { imageURL, coment } = data;\r\n        const image = imageURL[0];\r\n        deliveryDataPet({\r\n            comments: coment,\r\n            petAvatar: image,\r\n            category: 'in good hands',\r\n            location,\r\n            sex: active,\r\n        });\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form addPetMoreInformation addPet>\r\n            <Title addPet addPetMoreInformation> {lang.addGood} </Title>\r\n            <WrapperForProgresMoreInformation>\r\n                {children}\r\n            </WrapperForProgresMoreInformation>\r\n            <form\r\n                onSubmit={handleSubmit(deliveryData)}\r\n                encType=\"multipart/form-data\"\r\n                style={{ marginTop: \"16px\" }}\r\n            >\r\n                <WrapperForMoreInformation addPetMoreInformation>\r\n                    <WrapperForInputInMoreInformationOne>\r\n                        <TypeInput> {lang.thesex} </TypeInput>\r\n                        <ListOption addPetMoreInformation>\r\n                            <ItemOption addPetMoreInformation>\r\n                                <ButtonSex\r\n                                    activeSex={active}\r\n                                    sex={'female'}\r\n                                    addPetMoreInformation\r\n                                    onClick={() => setActive('female')}\r\n                                    type=\"button\"\r\n                                >\r\n                                    {iconFemale} {lang.female}\r\n                                </ButtonSex>\r\n                            </ItemOption>\r\n                            <ItemOption addPetMoreInformation>\r\n                                <ButtonSex\r\n                                    activeSex={active}\r\n                                    sex={'male'}\r\n                                    onClick={() => setActive('male')}\r\n                                    type=\"button\"\r\n                                >\r\n                                    {iconMale} {lang.male}\r\n                                </ButtonSex>\r\n                            </ItemOption>\r\n                        </ListOption>\r\n                        {activeError && (\r\n                            <TextValidation activeSex>\r\n                                {activeError}\r\n                            </TextValidation>\r\n                        )}\r\n                        <LabelForAddImage addPetMoreInformation>\r\n                            <TypeInput addImage addPetMoreInformation>\r\n                                {lang.loadimg}\r\n                            </TypeInput>\r\n                            <ImageWrapper>\r\n                                <InputUploadImage\r\n                                    {...register('imageURL')}\r\n                                    aria-invalid={\r\n                                        errors.imageURL ? 'true' : 'false'\r\n                                    }\r\n                                    type=\"file\"\r\n                                    required\r\n                                    onChange={handleImageChange}\r\n                                ></InputUploadImage>\r\n                                {!imageURL && (\r\n                                    <>\r\n                                        <PlusImage\r\n                                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            viewBox=\"0 0 182 182\"\r\n                                            fill=\"none\"\r\n                                        >\r\n                                            <rect\r\n                                                width=\"182\"\r\n                                                height=\"182\"\r\n                                                rx=\"40\"\r\n                                                fill=\"#CCE4FB\"\r\n                                            />\r\n                                            <path\r\n                                                d=\"M92 115V91M92 91V67M92 91H116.375M92 91H67.625\"\r\n                                                stroke=\"#54ADFF\"\r\n                                            />\r\n                                        </PlusImage>\r\n                                    </>\r\n                                )}\r\n                                {imageURL && <ImagePet src={imageURL} />}\r\n                            </ImageWrapper>\r\n                            {imageError && (\r\n                                <TextValidation>{imageError}</TextValidation>\r\n                            )}\r\n                        </LabelForAddImage>\r\n                    </WrapperForInputInMoreInformationOne>\r\n                    <WrapperForInputInMoreInformationTwo>\r\n                        <LabelForAdd>\r\n                            <TypeInput> {lang.location} </TypeInput>\r\n                            <InputForAddPet\r\n                                {...register('location')}\r\n                                aria-invalid={\r\n                                    errors.location ? 'true' : 'false'\r\n                                }\r\n                                placeholder={lang.typelocation}\r\n                                type=\"text\"\r\n                                value={location}\r\n                                style={{\r\n                                    border: errors.location\r\n                                        ? '1px solid var(--red)'\r\n                                        : isLocationValid && !errors.location\r\n                                        ? '1px solid var(--green)'\r\n                                        : '1px solid var(--blue)',\r\n                                }}\r\n                                onChange={e => {\r\n                                    const isValid = /^[A-Za-z\\s]+$/.test(\r\n                                        e.target.value\r\n                                    );\r\n                                    setIsLocationValid(isValid);\r\n                                    setLocation(e.target.value);\r\n                                    if (isValid) {\r\n                                        errors.location = undefined;\r\n                                    }\r\n                                }}\r\n                            ></InputForAddPet>\r\n                            {isLocationValid && (\r\n                                <IconOkey\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"24\"\r\n                                    height=\"24\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    addPet\r\n                                    addPetMoreInformation\r\n                                >\r\n                                    <path\r\n                                        d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                        stroke=\"#00C3AD\"\r\n                                    />\r\n                                </IconOkey>\r\n                            )}\r\n                            {errors.location && (\r\n                                <>\r\n                                    <TextValidation addPet>\r\n                                        {errors.location.message}\r\n                                    </TextValidation>\r\n                                    <IconCrossValidate\r\n                                        addPetMoreInformation\r\n                                        onClick={() => {\r\n                                            setIsLocationValid(false);\r\n                                            setLocation('');\r\n                                        }}\r\n                                        type=\"button\"\r\n                                        addPet\r\n                                    >\r\n                                        {IconCross}\r\n                                    </IconCrossValidate>\r\n                                </>\r\n                            )}\r\n                        </LabelForAdd>\r\n                        <LabelForAdd coment addPetMoreInformation>\r\n                            <TypeInput> {lang.comments} </TypeInput>\r\n                            <Textarea\r\n                                withOutPrice\r\n                                {...register('coment')}\r\n                                aria-invalid={errors.coment ? 'true' : 'false'}\r\n                                {...register('coment', {\r\n                                    maxLength: 120,\r\n                                })}\r\n                                placeholder={lang.typepet}\r\n                                type=\"text\"\r\n                                value={coment}\r\n                                spellCheck=\"false\"\r\n                                data-grame=\"false\"\r\n                                style={{\r\n                                    border: errors.coment\r\n                                        ? '1px solid var(--red)'\r\n                                        : isComentValid && !errors.coment\r\n                                        ? '1px solid var(--green)'\r\n                                        : '1px solid var(--blue)',\r\n                                }}\r\n                                onChange={e => {\r\n                                    const isValid =\r\n                                        /^[a-zA-Z0-9\\s\\W]{0,120}$/.test(\r\n                                            e.target.value\r\n                                        );\r\n                                    setIsComentValid(isValid);\r\n                                    setComent(e.target.value);\r\n                                    const textarea = e.target;\r\n                                    textarea.style.height = 'auto';\r\n                                    textarea.style.height =\r\n                                        textarea.scrollHeight + 'px';\r\n                                    if (isValid) {\r\n                                        errors.coment = undefined;\r\n                                    }\r\n                                }}\r\n                            ></Textarea>\r\n\r\n                            {isComentValid && !errors.coment && (\r\n                                <IconOkey\r\n                                    addPetMoreInformation\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    width=\"24\"\r\n                                    height=\"24\"\r\n                                    viewBox=\"0 0 24 24\"\r\n                                    fill=\"none\"\r\n                                    addPet\r\n                                >\r\n                                    <path\r\n                                        d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                        stroke=\"#00C3AD\"\r\n                                    />\r\n                                </IconOkey>\r\n                            )}\r\n                            {errors.coment && (\r\n                                <>\r\n                                    <TextValidation addPet>\r\n                                        {errors.coment.message}\r\n                                    </TextValidation>\r\n                                    <IconCrossValidate\r\n                                        addPetMoreInformation\r\n                                        onClick={() => {\r\n                                            setIsComentValid(false);\r\n                                            setComent('');\r\n                                        }}\r\n                                        type=\"button\"\r\n                                        addPet\r\n                                    >\r\n                                        {IconCross}\r\n                                    </IconCrossValidate>\r\n                                </>\r\n                            )}\r\n                        </LabelForAdd>\r\n                    </WrapperForInputInMoreInformationTwo>\r\n                </WrapperForMoreInformation>\r\n                <WrapperNextBackButton addPetMoreInformation>\r\n                    <ButtonTransparent addPet onClick={() => beforeForm()}>\r\n                        <BiArrowBack /> {stepNumber > 1 ? lang.back : lang.cancel}\r\n                    </ButtonTransparent>\r\n                    <Button\r\n                        stepNumber={stepNumber}\r\n                        addPet\r\n                        addPetMoreInformation\r\n                        type=\"submit\"\r\n                    >\r\n                        {stepNumber > 2 ? lang.done : lang.next} {iconPawprint}\r\n                    </Button>\r\n                </WrapperNextBackButton>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import React, { useRef } from 'react';\r\nimport PersonalDetails from './PersonalDetails/PersonalDetails';\r\nimport MoreInfo from './MoreInfo/MoreInfo';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport operations from 'redux/notices/notices-operations';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default function AddInGoodHandsPet({\r\n    children,\r\n    nextForm,\r\n    beforeForm,\r\n    stepNumber,\r\n    state,\r\n    clearStepNumber,\r\n    clearData\r\n}) {\r\n    const [pet, setPet] = useLocalStorage(\"dataSellPet\", {});\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const backLinkLocation = useRef(state?.from ?? '/');\r\n    const deliveryDataPet = data => {\r\n        setPet(prevState => {\r\n            return { ...prevState, ...data };\r\n        });\r\n        if (stepNumber === 3) {\r\n            const formData = new FormData();\r\n            for (const key in { ...pet, ...data }) {\r\n                formData.append(key, { ...pet, ...data }[key]);\r\n            }\r\n            dispatch(operations.fetchAddNotice(formData)).then(() => {\r\n                toast.success(`Pet added successfully`);\r\n            })\r\n            .catch(() => {\r\n                toast.error('Something went wrong');\r\n            });\r\n            navigate(backLinkLocation.current);\r\n            clearStepNumber();\r\n            clearData(\"dataSellPet\");\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n        {stepNumber === 2 && (\r\n            <PersonalDetails\r\n                children={children}\r\n                nextForm={nextForm}\r\n                beforeForm={beforeForm}\r\n                stepNumber={stepNumber}\r\n                deliveryDataPet={deliveryDataPet}\r\n            />\r\n        )}\r\n        {stepNumber === 3 && (\r\n            <MoreInfo\r\n                children={children}\r\n                nextForm={nextForm}\r\n                beforeForm={beforeForm}\r\n                stepNumber={stepNumber}\r\n                deliveryDataPet={deliveryDataPet}\r\n            />\r\n        )}\r\n    </>\r\n    );\r\n}\r\n","import React, { useRef ,useEffect, useState } from 'react';\r\nimport ChooseOption from './ChooseOption/ChooseOption';\r\nimport ListProgresSteps from './ListSteps/ListProgresSteps';\r\nimport AddYourPet from './AddYourPet/AddYourPet';\r\nimport AddSellPet from './AddSellPet/AddSellPet';\r\nimport AddLostPet from './AddLostPet/AddLostPet';\r\nimport AddInGoodHandsPet from './AddInGoodHandsPet/AddInGoodHandsPet';\r\nimport { useLocalStorage } from 'hooks/useLocalStaoreage';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\n\r\nexport default function AddPetForm({ state }) {\r\n    const [stepNumber, setStepNumber] = useLocalStorage('stepNumber', 1);\r\n    const [active, setActive] = useLocalStorage('active', 1);\r\n    const navigate = useNavigate();\r\n    const backLinkLocation = useRef(state?.from ?? '/');\r\n\r\n    const { language} = useAll()\r\n    const [lang, setLang] = useState(langUA)\r\n\r\n    useEffect(() => {\r\n      setLang(language === 'english' ?  langEN :  langUA);\r\n    }, [language])\r\n    const nextForm = () => {\r\n        setStepNumber(prevState => {\r\n            return prevState + 1;\r\n        });\r\n    };\r\n    const beforeForm = () => {\r\n        if (stepNumber === 1) {\r\n            navigate(backLinkLocation.current);\r\n            return;\r\n        }\r\n        setStepNumber(prevState => {\r\n            return prevState - 1;\r\n        });\r\n    };\r\n    const clearStepNumber = () => {\r\n        JSON.parse(localStorage.getItem('stepNumber'));\r\n        localStorage.setItem('stepNumber', JSON.stringify(1));\r\n    };\r\n    const clearData = (name) => {\r\n        JSON.parse(localStorage.getItem(name));\r\n        localStorage.setItem(name, JSON.stringify({ }));\r\n    };\r\n    const activeOption = index => {\r\n        setActive(index + 1);\r\n    };\r\n    // const arraySteps = ['Choose  option', 'Personal details', 'More info'];\r\n    // const arrayOption = ['your pet', 'sell', 'lost/found', 'in good hands'];\r\n    const arraySteps = [lang.chooseoption, lang.details, lang.moreinfo];\r\n    const arrayOption = [lang.yourpet, lang.sell, lang.lost, lang.goodhands];\r\n    return (\r\n        <>\r\n            {stepNumber === 1 && (\r\n                <ChooseOption\r\n                    active={active}\r\n                    activeOption={activeOption}\r\n                    arrayOption={arrayOption}\r\n                    nextForm={nextForm}\r\n                    beforeForm={beforeForm}\r\n                    stepNumber={stepNumber}\r\n                >\r\n                    <ListProgresSteps\r\n                        arraySteps={arraySteps}\r\n                        stepNumber={stepNumber}\r\n                    />\r\n                </ChooseOption>\r\n            )}\r\n            {stepNumber >= 2 && active === 1 && (\r\n                <AddYourPet\r\n                    nextForm={nextForm}\r\n                    beforeForm={beforeForm}\r\n                    stepNumber={stepNumber}\r\n                    state={state}\r\n                    clearStepNumber={clearStepNumber}\r\n                    clearData={clearData}\r\n                >\r\n                    <ListProgresSteps\r\n                        arraySteps={arraySteps}\r\n                        stepNumber={stepNumber}\r\n                    />\r\n                </AddYourPet>\r\n            )}\r\n            {stepNumber >= 2 && active === 2 && (\r\n                <AddSellPet\r\n                    nextForm={nextForm}\r\n                    beforeForm={beforeForm}\r\n                    stepNumber={stepNumber}\r\n                    state={state}\r\n                    clearStepNumber={clearStepNumber}\r\n                    clearData={clearData}\r\n                >\r\n                    <ListProgresSteps\r\n                        arraySteps={arraySteps}\r\n                        stepNumber={stepNumber}\r\n                    />\r\n                </AddSellPet>\r\n            )}\r\n            {stepNumber >= 2 && active === 3 && (\r\n                <AddLostPet\r\n                    nextForm={nextForm}\r\n                    beforeForm={beforeForm}\r\n                    stepNumber={stepNumber}\r\n                    state={state}\r\n                    clearStepNumber={clearStepNumber}\r\n                    clearData={clearData}\r\n                >\r\n                    <ListProgresSteps\r\n                        arraySteps={arraySteps}\r\n                        stepNumber={stepNumber}\r\n                    />\r\n                </AddLostPet>\r\n            )}\r\n            {stepNumber >= 2 && active === 4 && (\r\n                <AddInGoodHandsPet\r\n                    nextForm={nextForm}\r\n                    beforeForm={beforeForm}\r\n                    stepNumber={stepNumber}\r\n                    state={state}\r\n                    clearStepNumber={clearStepNumber}\r\n                    clearData={clearData}\r\n                >\r\n                    <ListProgresSteps\r\n                        arraySteps={arraySteps}\r\n                        stepNumber={stepNumber}\r\n                    />\r\n                </AddInGoodHandsPet>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport AddPetForm from '../components/Forms/AddPetForm/AddPetForm';\r\nimport { HomeWrapperTwo } from './pages.styled/Pages.styled';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function AddPetPage() {\r\n  const location = useLocation();\r\n  const state = location.state;\r\n  return (\r\n    <HomeWrapperTwo>\r\n      <AddPetForm  state={state} />\r\n    </HomeWrapperTwo>\r\n  );\r\n}\r\n"],"names":["useLocalStorage","key","initialState","_useState","useState","_JSON$parse","JSON","parse","localStorage","getItem","_useState2","_slicedToArray","state","setState","useEffect","setItem","stringify","ChooseOption","_ref","children","active","activeOption","arrayOption","nextForm","beforeForm","stepNumber","language","useAll","langUA","lang","setLang","langEN","_jsxs","Form","addPet","Title","_jsx","ListOption","map","option","index","ItemOption","ButtonOption","onClick","currentActive","type","WrapperNextBackButton","ButtonTransparent","BiArrowBack","back","cancel","Button","done","next","iconPawprint","ListProgresSteps","arraySteps","ListSteps","chooseOption","step","ItemStep","TextStep","currentStep","Progres","schema","object","name","string","required","min","max","matches","birth","typePet","PersonalDetails","deliveryDataPet","isNameValid","setIsNameValid","_useState3","_useState4","isBirthValid","setIsBirthValid","_useState5","_useState6","isTypeValid","setIsTypeValid","_useLocalStorage","_useLocalStorage2","setName","_useLocalStorage3","_useLocalStorage4","setBirth","_useLocalStorage5","_useLocalStorage6","setTypePet","_useState7","_useState8","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","addYourPet","onSubmit","data","birthday","style","marginTop","LabelForAdd","TypeInput","petsname","InputForAddPet","_objectSpread","placeholder","typename","value","border","onChange","e","isValid","test","target","undefined","IconOkey","xmlns","width","height","viewBox","fill","d","stroke","_Fragment","TextValidation","message","IconCrossValidate","IconCross","typebirth","yourPet","typepet","coment","MoreInfo","isComentValid","setIsComentValid","setComent","imageURL","setImageURL","imageError","setImageError","image","comments","petAvatar","encType","LabelForAddImage","addImage","loadimg","ImageWrapper","InputUploadImage","accept","file","files","size","URL","createObjectURL","PlusImage","rx","ImagePet","src","Textarea","maxLength","typecomment","spellCheck","textarea","scrollHeight","AddYourPet","_state$from","clearStepNumber","clearData","pet","setPet","navigate","useNavigate","dispatch","useDispatch","backLinkLocation","useRef","from","prevState","formData","FormData","append","operations","addMySelfPet","then","toast","success","catch","error","current","title","isTitleValid","setIsTitleValid","setTitle","_useLocalStorage7","_useLocalStorage8","_useState9","_useState10","addpetforsale","titleofadd","Birthday","location","price","isLocationValid","setIsLocationValid","setLocation","isPriceValid","setIsPriceValid","setPrice","activeError","setActiveError","_useLocalStorage9","_useLocalStorage10","setActive","_useState11","_useState12","addPetMoreInformation","WrapperForProgresMoreInformation","category","sex","WrapperForMoreInformation","WrapperForInputInMoreInformationOne","thesex","ButtonSex","activeSex","iconFemale","female","iconMale","male","WrapperForInputInMoreInformationTwo","typelocation","typeofprice","className","AddSellPet","fetchAddNotice","addLostPet","typetitle","withOutPrice","AddLostPet","addGood","AddInGoodHandsPet","AddPetForm","setStepNumber","chooseoption","details","moreinfo","yourpet","sell","lost","goodhands","AddPetPage","useLocation","HomeWrapperTwo"],"sourceRoot":""}