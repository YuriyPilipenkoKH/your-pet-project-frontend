{"version":3,"file":"static/js/906.52e4e877.chunk.js","mappings":"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","sources":["components/Forms/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport {\r\n    ButtonSubmit,\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    InputForAuthorization,\r\n    LabelForLogin,\r\n    LinkToForm,\r\n    Question,\r\n    ShowPasswordButton,\r\n    TextValidation,\r\n    Title,\r\n} from '../Forms.styled';\r\nimport { IconCross, iconEyes } from '../../../images/icons';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useDispatch } from 'react-redux';\r\nimport { authOperations } from 'redux/auth';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst schema = object({\r\n    email: string()\r\n        .required()\r\n        .matches(\r\n            /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,})+$/,\r\n            'Enter a valid email address'\r\n        ),\r\n    password: string()\r\n        .required()\r\n        .matches(\r\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,16}$/,\r\n            'Password: 1 lowercase, 1 uppercase, 1 digit, 6-16 characters.'\r\n        ),\r\n}).required();\r\n\r\nexport default function LoginForm() {\r\n    const dispatch = useDispatch();\r\n    const [show, setShow] = useState(false);\r\n    const [isEmailValid, setIsEmailValid] = useState(false);\r\n    const [isPasswordValid, setIsPasswordlValid] = useState(false);\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const { language } = useAll();\r\n    const [lang, setLang] = useState(langUA);\r\n\r\n    useEffect(() => {\r\n        setLang(language === 'english' ? langEN : langUA);\r\n    }, [language]);\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n    const handleClickShow = () => setShow(!show);\r\n    const deliveryDataUser = (email, password) => {\r\n        dispatch(authOperations.logIn({ email, password }))\r\n            .unwrap()\r\n            .then(originalPromiseResult => {\r\n                toast.success(`${lang.Welcomeback} ${originalPromiseResult.user.name}`);\r\n            })\r\n            .catch(() => {\r\n                toast.error(lang.Incorrect);\r\n            });\r\n    };\r\n    const reset = () => {\r\n        setEmail('');\r\n        setPassword('');\r\n        setIsEmailValid(false);\r\n        setIsPasswordlValid(false);\r\n    };\r\n    const deliveryData = data => {\r\n        const { email, password } = data;\r\n        deliveryDataUser(email, password);\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form>\r\n            <form onSubmit={handleSubmit(deliveryData)}>\r\n                <Title>{lang.logBtn}</Title>\r\n                <LabelForLogin>\r\n                    <InputForAuthorization\r\n                        {...register('email')}\r\n                        aria-invalid={errors.email ? 'true' : 'false'}\r\n                        placeholder={lang.email}\r\n                        type=\"email\"\r\n                        value={email}\r\n                        style={{\r\n                            border: errors.email\r\n                                ? '1px solid var(--red)'\r\n                                : isEmailValid && !errors.email\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid =\r\n                                /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/.test(\r\n                                    e.target.value\r\n                                );\r\n                            setIsEmailValid(isValid);\r\n                            setEmail(e.target.value);\r\n                            if (isValid) {\r\n                                errors.email = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAuthorization>\r\n                    {isEmailValid && !errors.email && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.email && (\r\n                        <>\r\n                            <TextValidation>\r\n                                {errors.email.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsEmailValid(false);\r\n                                    setEmail('');\r\n                                }}\r\n                                type=\"button\"\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForLogin>\r\n                <LabelForLogin login={true}>\r\n                    <InputForAuthorization\r\n                        {...register('password')}\r\n                        aria-invalid={errors.password ? 'true' : 'false'}\r\n                        placeholder={lang.pass}\r\n                        title=\"Password must contain at least one lowercase letter, one uppercase letter, and one digit. It should be 6 to 16 characters long.\"\r\n                        value={password}\r\n                        type={show ? 'text' : 'password'}\r\n                        style={{\r\n                            border: errors.password\r\n                                ? '1px solid var(--red)'\r\n                                : isPasswordValid && !errors.password\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid =\r\n                                /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,16}$/.test(\r\n                                    e.target.value\r\n                                );\r\n                            setIsPasswordlValid(isValid);\r\n                            setPassword(e.target.value);\r\n                            if (isValid) {\r\n                                errors.password = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAuthorization>\r\n                    {isPasswordValid && !errors.password && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            iconPassowrd\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.password && (\r\n                        <>\r\n                            <TextValidation>\r\n                                {errors.password.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsPasswordlValid(false);\r\n                                    setPassword('');\r\n                                }}\r\n                                type=\"button\"\r\n                                iconPassowrd\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                    <ShowPasswordButton type=\"button\" onClick={handleClickShow}>\r\n                        {iconEyes}\r\n                    </ShowPasswordButton>\r\n                </LabelForLogin>\r\n                <ButtonSubmit type=\"submit\" loginButtom={true}>\r\n                    {lang.logBtn}\r\n                </ButtonSubmit>\r\n                <Question>\r\n                    {lang.notYet}{' '}\r\n                    {\r\n                        <LinkToForm href=\"fwefew\" to=\"/register\">\r\n                            {lang.regBtn}\r\n                        </LinkToForm>\r\n                    }\r\n                </Question>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport LoginForm from '../components/Forms/LoginForm/LoginForm'\r\nimport { HomeWrapperTwo } from './pages.styled/Pages.styled'\r\n\r\nexport default function LoginPage() {\r\n  return (\r\n        <HomeWrapperTwo>\r\n            <LoginForm />\r\n        </HomeWrapperTwo>\r\n  )\r\n}\r\n"],"names":["schema","object","email","string","required","matches","password","LoginForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","show","setShow","_useState3","_useState4","isEmailValid","setIsEmailValid","_useState5","_useState6","isPasswordValid","setIsPasswordlValid","_useState7","_useState8","setEmail","_useState9","_useState10","setPassword","language","useAll","_useState11","langUA","_useState12","lang","setLang","useEffect","langEN","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","_jsx","Form","children","_jsxs","onSubmit","data","authOperations","logIn","unwrap","then","originalPromiseResult","toast","success","concat","Welcomeback","user","name","catch","error","Incorrect","deliveryDataUser","Title","logBtn","LabelForLogin","InputForAuthorization","_objectSpread","placeholder","type","value","style","border","onChange","e","isValid","test","target","undefined","IconOkey","xmlns","width","height","viewBox","fill","d","stroke","_Fragment","TextValidation","message","IconCrossValidate","onClick","IconCross","login","pass","title","iconPassowrd","ShowPasswordButton","iconEyes","ButtonSubmit","loginButtom","Question","notYet","LinkToForm","href","to","regBtn","LoginPage","HomeWrapperTwo"],"sourceRoot":""}