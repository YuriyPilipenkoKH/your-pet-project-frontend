{"version":3,"file":"static/js/214.8b7421d2.chunk.js","mappings":"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","sources":["components/Forms/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport {\r\n    ButtonSubmit,\r\n    Form,\r\n    IconCrossValidate,\r\n    IconOkey,\r\n    InputForAuthorization,\r\n    LabelForRegistration,\r\n    LinkToForm,\r\n    Question,\r\n    ShowPasswordButton,\r\n    TextValidation,\r\n    Title,\r\n} from '../Forms.styled';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { IconCross, iconEyes } from '../../../images/icons';\r\nimport { useForm } from 'react-hook-form';\r\nimport { object, string } from 'yup';\r\nimport { useDispatch } from 'react-redux';\r\nimport { authOperations } from 'redux/auth';\r\nimport { useAll } from 'hooks/useAll';\r\nimport { langEN, langUA } from 'utils/languages';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst schema = object({\r\n    name: string()\r\n        .required()\r\n        .min(2, 'Name should be at least 2 characters')\r\n        .max(16, 'Name should not exceed 16 characters')\r\n        .matches(\r\n            /^[a-zA-Z]{2,16}$/,\r\n            'Name should contain only letters and without spaces'\r\n        ),\r\n    email: string()\r\n        .required()\r\n        .matches(\r\n            /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,})+$/,\r\n            'Enter a valid email address'\r\n        ),\r\n    password: string()\r\n        .required()\r\n        .matches(\r\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,16}$/,\r\n            'Password: 1 lowercase, 1 uppercase, 1 digit, 6-16 characters.'\r\n        ),\r\n}).required();\r\n\r\nexport default function RegisterForm() {\r\n    const dispatch = useDispatch();\r\n    const [showOne, setShowOne] = useState(false);\r\n    const [showTwo, setShowTwo] = useState(false);\r\n    const [isNameValid, setIsNameValid] = useState(false);\r\n    const [isEmailValid, setIsEmailValid] = useState(false);\r\n    const [isPasswordValid, setIsPasswordlValid] = useState(false);\r\n    const [isConfirmPasswordValid, setIsConfirmPasswordlValid] =\r\n        useState(false);\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [confirmPasswordError, setConfirmPasswordError] = useState('');\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        defaultValues: {\r\n            name: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        resolver: yupResolver(schema),\r\n    });\r\n    const handleClickShowOne = () => setShowOne(!showOne);\r\n    const handleClickShowTwo = () => setShowTwo(!showTwo);\r\n\r\n    const { language } = useAll();\r\n    const [lang, setLang] = useState(langUA);\r\n\r\n    useEffect(() => {\r\n        setLang(language === 'english' ? langEN : langUA);\r\n    }, [language]);\r\n\r\n    const deliveryDataUser = (name, email, password) => {\r\n        dispatch(authOperations.register({ name, email, password }))\r\n            .unwrap()\r\n            .catch(() => {\r\n                toast.error(lang.userexists);\r\n            });\r\n    };\r\n    const reset = () => {\r\n        setName('');\r\n        setEmail('');\r\n        setPassword('');\r\n        setConfirmPassword('');\r\n        setIsNameValid(false);\r\n        setIsEmailValid(false);\r\n        setIsPasswordlValid(false);\r\n        setIsConfirmPasswordlValid(false);\r\n    };\r\n    const deliveryData = data => {\r\n        if (data.password !== confirmPassword) {\r\n            setConfirmPasswordError(\"'Passwords do not match'\");\r\n            return;\r\n        }\r\n        const { name, email, password } = data;\r\n        deliveryDataUser(name, email, password);\r\n        reset();\r\n    };\r\n\r\n    return (\r\n        <Form>\r\n            <form onSubmit={handleSubmit(deliveryData)}>\r\n                <Title>{lang.regTitle}</Title>\r\n                <LabelForRegistration>\r\n                    <InputForAuthorization\r\n                        {...register('name')}\r\n                        aria-invalid={errors.name ? 'true' : 'false'}\r\n                        placeholder={lang.formName}\r\n                        type=\"text\"\r\n                        value={name}\r\n                        style={{\r\n                            border: errors.name\r\n                                ? '1px solid var(--red)'\r\n                                : isNameValid && !errors.name\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid = /^[a-zA-Z]{2,16}$/.test(\r\n                                e.target.value\r\n                            );\r\n                            setIsNameValid(isValid);\r\n                            setName(e.target.value);\r\n                            if (isValid) {\r\n                                errors.name = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAuthorization>\r\n                    {isNameValid && !errors.name && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.name && (\r\n                        <>\r\n                            <TextValidation>\r\n                                {errors.name.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsNameValid(false);\r\n                                    setName('');\r\n                                }}\r\n                                type=\"button\"\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForRegistration>\r\n                <LabelForRegistration>\r\n                    <InputForAuthorization\r\n                        {...register('email')}\r\n                        aria-invalid={errors.email ? 'true' : 'false'}\r\n                        placeholder={lang.email}\r\n                        type=\"email\"\r\n                        value={email}\r\n                        style={{\r\n                            border: errors.email\r\n                                ? '1px solid var(--red)'\r\n                                : isEmailValid && !errors.email\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid =\r\n                                /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,})+$/.test(\r\n                                    e.target.value\r\n                                );\r\n                            setIsEmailValid(isValid);\r\n                            setEmail(e.target.value);\r\n                            if (isValid) {\r\n                                errors.email = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAuthorization>\r\n                    {isEmailValid && !errors.email && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.email && (\r\n                        <>\r\n                            <TextValidation>\r\n                                {errors.email.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsEmailValid(false);\r\n                                    setEmail('');\r\n                                }}\r\n                                type=\"button\"\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                </LabelForRegistration>\r\n\r\n                <LabelForRegistration>\r\n                    <InputForAuthorization\r\n                        {...register('password')}\r\n                        aria-invalid={errors.password ? 'true' : 'false'}\r\n                        placeholder={lang.pass}\r\n                        value={password}\r\n                        title=\"Password must contain at least one lowercase letter, one uppercase letter, and one digit. It should be 6 to 16 characters long.\"\r\n                        type={showOne ? 'text' : 'password'}\r\n                        style={{\r\n                            border: errors.password\r\n                                ? '1px solid var(--red)'\r\n                                : isPasswordValid && !errors.password\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid =\r\n                                /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,16}$/.test(\r\n                                    e.target.value\r\n                                );\r\n                            setIsPasswordlValid(isValid);\r\n                            setPassword(e.target.value);\r\n                            if (isValid) {\r\n                                errors.password = undefined;\r\n                            }\r\n                        }}\r\n                    ></InputForAuthorization>\r\n                    {isPasswordValid && !errors.password && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            iconPassowrd\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {errors.password && (\r\n                        <>\r\n                            <TextValidation>\r\n                                {errors.password.message}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsPasswordlValid(false);\r\n                                    setPassword('');\r\n                                }}\r\n                                type=\"button\"\r\n                                iconPassowrd\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                    <ShowPasswordButton\r\n                        type=\"button\"\r\n                        onClick={handleClickShowOne}\r\n                    >\r\n                        {iconEyes}\r\n                    </ShowPasswordButton>\r\n                </LabelForRegistration>\r\n                <LabelForRegistration registration={true}>\r\n                    <InputForAuthorization\r\n                        {...register('confirmPassword')}\r\n                        aria-invalid={confirmPasswordError ? 'true' : 'false'}\r\n                        placeholder={lang.confirmPass}\r\n                        type={showTwo ? 'text' : 'password'}\r\n                        value={confirmPassword}\r\n                        title=\"Password must contain at least one lowercase letter, one uppercase letter, and one digit. It should be 6 to 16 characters long.\"\r\n                        style={{\r\n                            border: confirmPasswordError\r\n                                ? '1px solid var(--red)'\r\n                                : isConfirmPasswordValid &&\r\n                                  !confirmPasswordError\r\n                                ? '1px solid var(--green)'\r\n                                : '1px solid var(--blue)',\r\n                        }}\r\n                        onChange={e => {\r\n                            const isValid =\r\n                                /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,16}$/.test(\r\n                                    e.target.value\r\n                                );\r\n                            setIsConfirmPasswordlValid(isValid);\r\n                            if (isValid) {\r\n                                setConfirmPasswordError('');\r\n                            }\r\n                            setConfirmPassword(e.target.value);\r\n                        }}\r\n                    ></InputForAuthorization>\r\n                    {isConfirmPasswordValid && !confirmPasswordError && (\r\n                        <IconOkey\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            width=\"24\"\r\n                            height=\"24\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            fill=\"none\"\r\n                            iconPassowrd\r\n                        >\r\n                            <path\r\n                                d=\"M20.0001 7L9.0001 18L4 13\"\r\n                                stroke=\"#00C3AD\"\r\n                            />\r\n                        </IconOkey>\r\n                    )}\r\n                    {confirmPasswordError && (\r\n                        <>\r\n                            <TextValidation>\r\n                                {confirmPasswordError}\r\n                            </TextValidation>\r\n                            <IconCrossValidate\r\n                                onClick={() => {\r\n                                    setIsConfirmPasswordlValid(false);\r\n                                    setConfirmPassword('');\r\n                                }}\r\n                                type=\"button\"\r\n                                iconPassowrd\r\n                            >\r\n                                {IconCross}\r\n                            </IconCrossValidate>\r\n                        </>\r\n                    )}\r\n                    <ShowPasswordButton\r\n                        type=\"button\"\r\n                        onClick={handleClickShowTwo}\r\n                    >\r\n                        {iconEyes}\r\n                    </ShowPasswordButton>\r\n                </LabelForRegistration>\r\n                <ButtonSubmit type=\"submit\"> {lang.regTitle} </ButtonSubmit>\r\n                <Question>\r\n                    {lang.alreadyGot}{' '}\r\n                    {\r\n                        <LinkToForm href=\"fwefew\" to=\"/login\">\r\n                            {lang.logBtn}\r\n                        </LinkToForm>\r\n                    }\r\n                </Question>\r\n            </form>\r\n        </Form>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport RegisterForm from '../components/Forms/RegisterForm/RegisterForm'\r\nimport { HomeWrapperTwo } from './pages.styled/Pages.styled'\r\n\r\nexport default function RegisterPage() {\r\n  return (\r\n    <HomeWrapperTwo>\r\n        <RegisterForm />\r\n    </HomeWrapperTwo>\r\n  )\r\n}\r\n"],"names":["schema","object","name","string","required","min","max","matches","email","password","RegisterForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showOne","setShowOne","_useState3","_useState4","showTwo","setShowTwo","_useState5","_useState6","isNameValid","setIsNameValid","_useState7","_useState8","isEmailValid","setIsEmailValid","_useState9","_useState10","isPasswordValid","setIsPasswordlValid","_useState11","_useState12","isConfirmPasswordValid","setIsConfirmPasswordlValid","_useState13","_useState14","setName","_useState15","_useState16","setEmail","_useState17","_useState18","setPassword","_useState19","_useState20","confirmPassword","setConfirmPassword","_useState21","_useState22","confirmPasswordError","setConfirmPasswordError","_useForm","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","language","useAll","_useState23","langUA","_useState24","lang","setLang","useEffect","langEN","_jsx","Form","children","_jsxs","onSubmit","data","authOperations","unwrap","catch","toast","error","userexists","deliveryDataUser","Title","regTitle","LabelForRegistration","InputForAuthorization","_objectSpread","placeholder","formName","type","value","style","border","onChange","e","isValid","test","target","undefined","IconOkey","xmlns","width","height","viewBox","fill","d","stroke","_Fragment","TextValidation","message","IconCrossValidate","onClick","IconCross","pass","title","iconPassowrd","ShowPasswordButton","iconEyes","registration","confirmPass","ButtonSubmit","Question","alreadyGot","LinkToForm","href","to","logBtn","RegisterPage","HomeWrapperTwo"],"sourceRoot":""}